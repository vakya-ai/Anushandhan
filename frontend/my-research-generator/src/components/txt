================================================
File: README.md
================================================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)


================================================
File: package.json
================================================
{
  "name": "client",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.13.3",
    "@emotion/styled": "^11.13.0",
    "@fortawesome/free-solid-svg-icons": "^6.6.0",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@mui/material": "^6.1.1",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.7.7",
    "bcrpyt": "^2.0.0",
    "bcrypt": "^5.1.1",
    "bcryptjs": "^2.4.3",
    "body-parser": "^1.20.3",
    "chart.js": "^4.4.4",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "i18next": "^23.15.1",
    "jsonwebtoken": "^9.0.2",
    "multer": "^1.4.5-lts.1",
    "mysql2": "^3.11.3",
    "nodemon": "^3.1.7",
    "react": "^18.3.1",
    "react-chartjs-2": "^5.2.0",
    "react-dom": "^18.3.1",
    "react-i18next": "^15.0.2",
    "react-icons": "^5.3.0",
    "react-router-dom": "^6.26.2",
    "react-scripts": "5.0.1",
    "sequelize": "^6.37.4",
    "socket.io": "^4.8.1",
    "socket.io-client": "^4.8.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}


================================================
File: requirements.txt
================================================
these are to be installed in the server folder

npm install express body-parser cors dotenv

# Database dependencies
npm install sequelize mysql2

# Real-time communication dependencies
npm install socket.io


These are to be installed in the client folder

# Core dependencies
npm install axios socket.io-client

# Charting library
npm install chart.js react-chartjs-2


================================================
File: public/index.html
================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>HealthLink Central</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>


================================================
File: public/manifest.json
================================================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}


================================================
File: public/robots.txt
================================================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:


================================================
File: server/server.js
================================================
// server/server.js
const express = require('express');
const http = require('http');
const bodyParser = require('body-parser');
const cors = require('cors');
const dotenv = require('dotenv');
const { Server } = require('socket.io');
const sequelize = require('./config/db');
const dashboardAppointment = require('./models/dashboardAppointment');
const userRoutes = require('./routes/userRoutes');
const uploadRoutes = require('./routes/uploadRoutes');
const appointmentRoutes = require('./routes/appointmentRoutes');
const medicalrecordsRoutes = require('./routes/medicalRecordRoutes');
const medicalBillRoutes = require('./routes/medicalBillRoutes');
const medicationRoutes = require('./routes/medicationRoutes');
const reportRoutes = require('./routes/reportRoutes');
const dasboardreportRoutes = require('./routes/dashboardreportRoutes');
const dashboardappointmentRoutes = require('./routes/dashboardappointmentRoutes');

// Load environment variables
dotenv.config();

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
    cors: {
        origin: '*',
        methods: ['GET', 'POST', 'PATCH', 'DELETE']
    }
});

// Middlewares
app.use(cors());
app.use(bodyParser.json());
app.use('/uploads', express.static('uploads'));

let appointments = [];

// Routes
app.use('/api/users', userRoutes);
app.use('/api/upload', uploadRoutes);
app.use('/api/appointments', appointmentRoutes);
app.use('/api/medical-records', medicalrecordsRoutes);
app.use('/api/medical-bills', medicalBillRoutes);
app.use('/api/medications', medicationRoutes);
app.use('/api/reports', reportRoutes);
app.use('/api/dashboard_reports', dasboardreportRoutes);
app.use('/api/dashboard_appointments', dashboardappointmentRoutes);

// Fetch appointments
app.get('/api/appointments', (req, res) => {
    res.json(appointments);
});

// Add new appointment
app.post('/api/appointments', (req, res) => {
    const newAppointment = { id: Date.now(), ...req.body, status: 'Pending' };
    appointments.push(newAppointment);
    res.status(201).json(newAppointment);

    // Emit event for new appointment
    io.emit('updateAppointment', { action: 'add', data: newAppointment });
});

// Postpone appointment
app.patch('/api/appointments/postpone/:id', (req, res) => {
    const appointmentId = parseInt(req.params.id, 10);
    const appointment = appointments.find(app => app.id === appointmentId);
    if (appointment) {
        appointment.status = 'Postponed';
        res.json(appointment);

        // Emit event for postponed appointment
        io.emit('updateAppointment', { action: 'postpone', data: appointment });
    } else {
        res.status(404).json({ message: 'Appointment not found' });
    }
});

// Complete appointment
app.patch('/api/appointments/complete/:id', (req, res) => {
    const appointmentId = parseInt(req.params.id, 10);
    const appointment = appointments.find(app => app.id === appointmentId);
    if (appointment) {
        appointment.status = 'Completed';
        res.json(appointment);

        // Emit event for completed appointment
        io.emit('updateAppointment', { action: 'complete', data: appointment });
    } else {
        res.status(404).json({ message: 'Appointment not found' });
    }
});

// Delete appointment
app.delete('/api/appointments/:id', (req, res) => {
    const appointmentId = parseInt(req.params.id, 10);
    const index = appointments.findIndex(app => app.id === appointmentId);
    if (index !== -1) {
        const [deletedAppointment] = appointments.splice(index, 1);
        res.json(deletedAppointment);

        // Emit event for deleted appointment
        io.emit('updateAppointment', { action: 'delete', id: appointmentId });
    } else {
        res.status(404).json({ message: 'Appointment not found' });
    }
});

// Database connection and server start
sequelize.sync({ force: false })
    .then(() => {
        const PORT = process.env.PORT || 5001;
        server.listen(PORT, () => {
            console.log(`Server is running on port ${PORT}`);
        });
    })
    .catch(err => {
        console.error('Unable to connect to the database:', err);
    });

sequelize.authenticate()
    .then(() => {
        console.log('Successful MySQL Connection !');
    })
    .catch(() => {
        console.log('Failed to connect to MySQL');
    });


================================================
File: server/config/db.js
================================================
//config/db.js
require('dotenv').config();
const { Sequelize } = require('sequelize');

const sequelize = new Sequelize('healthlinkcentral', 'root', 'LemonLaw@1', {
    host: 'localhost',
    dialect: 'mysql'
});

module.exports = sequelize 

================================================
File: server/controllers/userController.js
================================================
// server/controllers/userController.js
const User = require('../models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

// Function to generate JWT token
const generateToken = (id) => {
    return jwt.sign({ id }, process.env.JWT_SECRET, { expiresIn: '1h' });
};

// Register a new user
exports.registerUser = async (req, res) => {
    const { aadharNumber, name, password, role } = req.body;
    try {
        const hashedPassword = await bcrypt.hash(password, 10);
        const user = await User.create({ aadharNumber, name, password: hashedPassword, role });
        const token = generateToken(user.id);
        res.status(201).json({ user, token });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// Login user and provide role-based response
exports.loginUser = async (req, res) => {
    const { aadharNumber, password } = req.body;
    try {
        const user = await User.findOne({ where: { aadharNumber } });
        if (!user || !await bcrypt.compare(password, user.password)) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }
        const token = generateToken(user.id);
        res.json({
            user,
            token,
            redirectUrl: user.role === 'doctor' ? '/doctor/dashboard' : '/patient/normal-patient' || user.role === 'patient' ? '/patient/normal-patient' : '/docror/dashboard'
            //redirectUrl: user.role === 'patient' ? '/patient/normal-patient' : '/doctor/dashboard',
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};


================================================
File: server/middleware/authMiddleware.js
================================================
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const protect = async (req, res, next) => {
    let token;
    
    // Check if the authorization header exists and starts with 'Bearer'
    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
        try {
            // Extract token from header
            token = req.headers.authorization.split(' ')[1];

            // Verify the token using the JWT secret
            const decoded = jwt.verify(token, process.env.JWT_SECRET);

            // Find the user by ID stored in the token payload
            req.user = await User.findByPk(decoded.id);

            // Proceed to the next middleware or route handler
            next();
        } catch (error) {
            // If token verification fails, return a 401 Unauthorized error
            return res.status(401).json({ message: 'Not authorized, token failed' });
        }
    }

    // If no token is found, return a 401 Unauthorized error
    if (!token) {
        return res.status(401).json({ message: 'Not authorized, no token' });
    }
};

module.exports = { protect };


================================================
File: server/middleware/dashboarduploadMiddleware.js
================================================
    // server/middleware/dashboarduploadMiddleware.js
    const multer = require('multer');
    const path = require('path');

    const storage = multer.diskStorage({
        destination: (req, file, cb) => {
            cb(null, 'uploads/');
        },
        filename: (req, file, cb) => {
            cb(null, `${file.fieldname}-${Date.now()}${path.extname(file.originalname)}`);
        }
    });

    const fileFilter = (req, file, cb) => {
        if (file.mimetype === 'application/pdf' || file.mimetype === 'text/csv') {
            cb(null, true);
        } else {
            cb(new Error('Invalid file type, only PDF and CSV are allowed!'), false);
        }
    };

    const upload = multer({
        storage: storage,
        fileFilter: fileFilter
    });

    module.exports = upload;

================================================
File: server/middleware/roleMiddleware.js
================================================
    // server/middleware/roleMiddleware.js
    const roleCheck = (roles) => {
        return (req, res, next) => {
            if (!roles.includes(req.user.role)) {
                return res.status(403).json({ message: 'Access denied' });
            }
            next();
        };
    };

    module.exports = { roleCheck };

================================================
File: server/middleware/uploadMiddleware.js
================================================
    // server/middleware/uploadMiddleware.js
    const multer = require('multer');
    const path = require('path');

    const storage = multer.diskStorage({
        destination: (req, file, cb) => {
            cb(null, 'uploads/');
        },
        filename: (req, file, cb) => {
            cb(null, `${file.fieldname}-${Date.now()}${path.extname(file.originalname)}`);
        }
    });

    const fileFilter = (req, file, cb) => {
        if (file.mimetype === 'application/pdf' || file.mimetype === 'text/csv') {
            cb(null, true);
        } else {
            cb(new Error('Invalid file type, only PDF and CSV are allowed!'), false);
        }
    };

    const upload = multer({
        storage: storage,
        fileFilter: fileFilter
    });

    module.exports = upload;

================================================
File: server/models/Appointment.js
================================================
const { Sequelize, DataTypes } = require('sequelize');
const sequelize = require('../config/db');  // Use your database connection

// Define Appointment model
const Appointment = sequelize.define('Appointment', {
    name: { type: DataTypes.STRING, allowNull: false },
    time: { type: DataTypes.STRING, allowNull: false },
    status: { type: DataTypes.ENUM('Pending', 'Postponed', 'Completed'), defaultValue: 'Pending' },
}, { timestamps: true });

module.exports = { Appointment };


================================================
File: server/models/MedicalBill.js
================================================
const {  Model, DataTypes } = require('sequelize');
const sequelize = require('../config/db');

class MedicalBill extends Model {}

MedicalBill.init({
    date: {
        type: DataTypes.DATE,
        allowNull: false,
    },
    name: {
        type: DataTypes.STRING,
        allowNull: false,
    },
    amount: {
        type: DataTypes.TEXT,
        allowNull: false,
    },
}, {
    sequelize,
    modelName: 'MedicalBill',
    tableName: 'medical_bills',
});

module.exports = { MedicalBill };


================================================
File: server/models/MedicalRecord.js
================================================
const {  Model, DataTypes } = require('sequelize');
const sequelize = require('../config/db');

class MedicalRecord extends Model {}

MedicalRecord.init({
    date: {
        type: DataTypes.DATE,
        allowNull: false,
    },
    name: {
        type: DataTypes.STRING,
        allowNull: false,
    },
    result: {
        type: DataTypes.TEXT,
        allowNull: false,
    },
}, {
    sequelize,
    modelName: 'MedicalRecord',
    tableName: 'medical_records',
});

module.exports = { MedicalRecord };


================================================
File: server/models/Medication.js
================================================
// models/Medication.js
const { Model, DataTypes } = require('sequelize');
const sequelize = require('../config/db');

class Medication extends Model {}

Medication.init({
    name: {
        type: DataTypes.STRING,
        allowNull: false,
    },
    dosage: {
        type: DataTypes.STRING,
        allowNull: false,
    },
    frequency: {
        type: DataTypes.STRING,
        allowNull: false,
    },
    condition: {
        type: DataTypes.STRING,
        allowNull: false,
    },
}, {
    sequelize,
    modelName: 'Medication',
    tableName: 'medications',
});

module.exports = { Medication };


================================================
File: server/models/Report.js
================================================
const { Model, DataTypes } = require('sequelize');
const sequelize = require('../config/db');

class Report extends Model {}

Report.init({
    name: {
        type: DataTypes.STRING,
        allowNull: false,
    },
    filePath: {
        type: DataTypes.STRING,
        allowNull: false,
    },
}, {
    sequelize,
    modelName: 'Report',
    tableName: 'reports',
});

module.exports = { Report };


================================================
File: server/models/User.js
================================================
// server/models/User.js
const { DataTypes } = require('sequelize');
const sequelize = require('../config/db');

const User = sequelize.define('User', {
    id: {
        type: DataTypes.INTEGER,
        autoIncrement: true,
        primaryKey: true,
        
    },
    aadharNumber: {
        type: DataTypes.STRING,
        unique: true,
        allowNull: false
    },
    name: {
        type: DataTypes.STRING,
        allowNull: false
    },
    password: {
        type: DataTypes.STRING,
        allowNull: false
    },
    role: {
        type: DataTypes.ENUM('patient', 'doctor'),
        defaultValue: 'patient'
    }
}, {
    timestamps:true,
});

User.sync();

module.exports = User;


================================================
File: server/models/dashboardAppointment.js
================================================
const { Sequelize, DataTypes } = require('sequelize');
const sequelize = require('../config/db');  // Use your database connection

// Define Appointment model
const dashboardAppointment = sequelize.define('dashboard_appointments', {
    name: { type: DataTypes.STRING, allowNull: false },
    time: { type: DataTypes.STRING, allowNull: false },
    status: { type: DataTypes.ENUM('Pending', 'Postponed', 'Completed'), defaultValue: 'Pending' },
}, { timestamps: true });

module.exports = { dashboardAppointment };


================================================
File: server/models/dashboardReport.js
================================================
//dashboardReport.js
const { Model, DataTypes } = require('sequelize');
const sequelize = require('../config/db');

class dashboardReport extends Model {}

dashboardReport.init({
    name: {
        type: DataTypes.STRING,
        allowNull: false,
    },
    filePath: {
        type: DataTypes.STRING,
        allowNull: false,
    },
}, {
    sequelize,
    modelName: 'dashboardReport',
    tableName: 'dashboard_reports',
});

module.exports = { dashboardReport };


================================================
File: server/routes/appointmentRoutes.js
================================================
const express = require('express');
const { Appointment } = require('../models/Appointment');
const router = express.Router();

// Fetch all appointments
router.get('/', async (req, res) => {
    try {
        const appointments = await Appointment.findAll();
        res.status(200).json(appointments);
    } catch (err) {
        res.status(500).json({ error: 'Failed to fetch appointments' });
    }
});

// Add a new appointment
router.post('/', async (req, res) => {
    const { name, time } = req.body;
    try {
        const newAppointment = await Appointment.create({ name, time, status: 'Pending' });
        res.status(201).json(newAppointment);
    } catch (err) {
        res.status(500).json({ error: 'Failed to add appointment' });
    }
});

// Postpone an appointment
router.patch('/postpone/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const appointment = await Appointment.findByPk(id);
        if (!appointment) return res.status(404).json({ error: 'Appointment not found' });
        
        appointment.status = 'Postponed';
        await appointment.save();
        res.status(200).json(appointment);
    } catch (err) {
        res.status(500).json({ error: 'Failed to postpone appointment' });
    }
});

// Complete an appointment
router.patch('/complete/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const appointment = await Appointment.findByPk(id);
        if (!appointment) return res.status(404).json({ error: 'Appointment not found' });
        
        appointment.status = 'Completed';
        await appointment.save();
        res.status(200).json(appointment);
    } catch (err) {
        res.status(500).json({ error: 'Failed to complete appointment' });
    }
});

// Delete a completed appointment
router.delete('/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const appointment = await Appointment.findByPk(id);
        if (!appointment) return res.status(404).json({ error: 'Appointment not found' });

        await appointment.destroy();
        res.status(200).json({ message: 'Appointment deleted' });
    } catch (err) {
        res.status(500).json({ error: 'Failed to delete appointment' });
    }
});

module.exports = router;


================================================
File: server/routes/dashboardappointmentRoutes.js
================================================
const express = require('express');
const { dashboardAppointment } = require('../models/dashboardAppointment');
const router = express.Router();
const http = require('http');
const { Server } = require('socket.io');
const app = express();
const server = http.createServer(app);
const io = new Server(server);


io.on('connection', (socket) => {
    console.log('Client connected to socket');

    // Listen for a new appointment creation
    socket.on('newAppointment', (data) => {
        io.emit('appointmentUpdate', data); // Broadcast to all clients
    });
});

// Endpoint for creating appointments
app.post('/api/dashboard_appointments', async (req, res) => {
    try {
        const newAppointment = await dashboardAppointment.create(req.body);
        const date = new Date().toISOString().split('T')[0]; // Format date for today
        const count = await dashboardAppointment.count(); // Get total appointment count

        io.emit('appointmentUpdate', { date, count }); // Emit the real-time update
        
        res.status(201).json(newAppointment);
    } catch (error) {
        res.status(500).json({ error: 'Failed to create appointment' });
    }
});

server.listen(5000, () => console.log('Server running on port 5000'));


// Fetch all appointments
router.get('/', async (req, res) => {
    try {
        const appointments = await dashboardAppointment.findAll();
        res.status(200).json(appointments);
    } catch (err) {
        res.status(500).json({ error: 'Failed to fetch appointments' });
    }
});

// Add a new appointment
router.post('/', async (req, res) => {
    const { name, time } = req.body;
    try {
        const newAppointment = await dashboardAppointment.create({ name, time, status: 'Pending' });
        res.status(201).json(newAppointment);
    } catch (err) {
        res.status(500).json({ error: 'Failed to add appointment' });
    }
});

// Postpone an appointment
router.patch('/postpone/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const appointment = await dashboardAppointment.findByPk(id);
        if (!appointment) return res.status(404).json({ error: 'Appointment not found' });
        
        appointment.status = 'Postponed';
        await appointment.save();
        res.status(200).json(appointment);
    } catch (err) {
        res.status(500).json({ error: 'Failed to postpone appointment' });
    }
});

// Complete an appointment
router.patch('/complete/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const appointment = await dashboardAppointment.findByPk(id);
        if (!appointment) return res.status(404).json({ error: 'Appointment not found' });
        
        appointment.status = 'Completed';
        await appointment.save();
        res.status(200).json(appointment);
    } catch (err) {
        res.status(500).json({ error: 'Failed to complete appointment' });
    }
});

// Delete a completed appointment
router.delete('/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const appointment = await dashboardAppointment.findByPk(id);
        if (!appointment) return res.status(404).json({ error: 'Appointment not found' });

        await appointment.destroy();
        res.status(200).json({ message: 'Appointment deleted' });
    } catch (err) {
        res.status(500).json({ error: 'Failed to delete appointment' });
    }
});

module.exports = router;


================================================
File: server/routes/dashboardreportRoutes.js
================================================
//dashboardreportRoutes.js
const express = require('express');
const multer = require('multer');
const path = require('path');
const jwt = require('jsonwebtoken'); // Import JWT
const { dashboardReport } = require('../models/dashboardReport'); // Assuming you've created a Report model
const fs = require('fs');
const router = express.Router();

// Setup multer for file upload
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, 'uploads/dashboard_reports'); // Folder to store uploaded reports
    },
    filename: (req, file, cb) => {
        cb(null, `${Date.now()}-${file.originalname}`);
    },
});

const upload = multer({ storage: storage });

// Authentication Middleware
const authenticateToken = (req, res, next) => {
    const token = req.headers['authorization'];

    if (!token) {
        return res.status(401).json({ error: 'Unauthorized, token missing' });
    }

    // Assuming you are using JWT for authentication
    jwt.verify(token.split(' ')[1], process.env.JWT_SECRET, (err, user) => {
        if (err) {
            return res.status(403).json({ error: 'Forbidden, invalid token' });
        }
        req.user = user; // Store the user info from token
        next();
    });
};

// Fetch all reports
router.get('/', async (req, res) => {
    try {
        const dashboardreports = await dashboardReport.findAll();
        res.status(200).json(dashboardreports);
    } catch (err) {
        res.status(500).json({ error: 'Failed to fetch reports' });
    }
});

// Upload a new report (with authentication)
router.post('/', authenticateToken, upload.single('file'), async (req, res) => {
    const { name } = req.body;
    const file = req.file;

    if (!file || !name) {
        return res.status(400).json({ error: 'File and report name are required' });
    }

    try {
        const newReport = await dashboardReport.create({
            name: name,
            filePath: file.path,
        });
        res.status(201).json(newReport);
    } catch (err) {
        console.error('Upload Error:', err.message, err.stack); // Log detailed error info
        res.status(500).json({ error: 'Failed to upload report' });
    }
});


// Delete a report
router.delete('/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const dashboardreport = await dashboardReport.findByPk(id);
        if (!dashboardreport) return res.status(404).json({ error: 'Report not found' });

        // Delete the file from the server
        fs.unlinkSync(dashboardreport.filePath);

        await dashboardreport.destroy();
        res.status(200).json({ message: 'Report deleted' });
    } catch (err) {
        res.status(500).json({ error: 'Failed to delete report' });
    }
});

module.exports = router;

================================================
File: server/routes/medicalBillRoutes.js
================================================

const express = require('express');
const { MedicalBill } = require('../models/MedicalBill'); 
const router = express.Router();


router.get('/', async (req, res) => {
    try {
        const medicalBills = await MedicalBill.findAll();
        res.status(200).json(medicalBills);
    } catch (err) {
        res.status(500).json({ error: 'Failed to fetch medical bills' });
    }
});


router.post('/', async (req, res) => {
    const { date, name, amount } = req.body;
    try {
        const newMedicalBill = await MedicalBill.create({ date, name, amount });
        res.status(201).json(newMedicalBill);
    } catch (err) {
        res.status(500).json({ error: 'Failed to add medical bill' });
    }
});


router.delete('/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const medicalBill = await MedicalBill.findByPk(id);
        if (!medicalBill) return res.status(404).json({ error: 'Medical Bill not found' });

        await medicalBill.destroy();
        res.status(200).json({ message: 'Medical BIll deleted' });
    } catch (err) {
        res.status(500).json({ error: 'Failed to delete medical bill' });
    }
});

module.exports = router;
    

================================================
File: server/routes/medicalRecordRoutes.js
================================================
// routes/medicalRecordRoutes.js
const express = require('express');
const { MedicalRecord } = require('../models/MedicalRecord'); // Assuming you've created a model for MedicalRecord
const router = express.Router();

// Fetch all medical records
router.get('/', async (req, res) => {
    try {
        const medicalRecords = await MedicalRecord.findAll();
        res.status(200).json(medicalRecords);
    } catch (err) {
        res.status(500).json({ error: 'Failed to fetch medical records' });
    }
});

// Add a new medical record
router.post('/', async (req, res) => {
    const { date, name, result } = req.body;
    try {
        const newMedicalRecord = await MedicalRecord.create({ date, name, result });
        res.status(201).json(newMedicalRecord);
    } catch (err) {
        res.status(500).json({ error: 'Failed to add medical record' });
    }
});

// Delete a medical record
router.delete('/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const medicalRecord = await MedicalRecord.findByPk(id);
        if (!medicalRecord) return res.status(404).json({ error: 'Medical Record not found' });

        await medicalRecord.destroy();
        res.status(200).json({ message: 'Medical Record deleted' });
    } catch (err) {
        res.status(500).json({ error: 'Failed to delete medical record' });
    }
});

module.exports = router;
    

================================================
File: server/routes/medicationRoutes.js
================================================
const express = require('express');
const { Medication } = require('../models/Medication'); 
const router = express.Router();


router.get('/', async (req, res) => {
    try {
        const Medications = await Medication.findAll();
        res.status(200).json(Medications);
    } catch (err) {
        res.status(500).json({ error: 'Failed to fetch medications' });
    }
});


router.post('/', async (req, res) => {
    const { name, dosage, frequency, condition } = req.body;
    try {
        const newMedication = await Medication.create({ name, dosage, frequency, condition });
        res.status(201).json(newMedication);
    } catch (err) {
        res.status(500).json({ error: 'Failed to add your medication' });
    }
});


router.delete('/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const medication = await Medication.findByPk(id);
        if (!medication) return res.status(404).json({ error: 'Medication not found' });

        await medication.destroy(); // Use `medication.destroy()` instead of `Medication.destroy()`
        res.status(200).json({ message: 'Medication deleted' });
    } catch (err) {
        console.error("Error deleting medication:", err); // Log the error for debugging
        res.status(500).json({ error: 'Failed to delete medication' });
    }
});


module.exports = router;
    

================================================
File: server/routes/reportRoutes.js
================================================
const express = require('express');
const multer = require('multer');
const path = require('path');
const jwt = require('jsonwebtoken'); // Import JWT
const { Report } = require('../models/Report'); // Assuming you've created a Report model
const fs = require('fs');
const router = express.Router();

// Setup multer for file upload
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, 'uploads/reports'); // Folder to store uploaded reports
    },
    filename: (req, file, cb) => {
        cb(null, `${Date.now()}-${file.originalname}`);
    },
});

const upload = multer({ storage: storage });

// Authentication Middleware
const authenticateToken = (req, res, next) => {
    const token = req.headers['authorization'];

    if (!token) {
        return res.status(401).json({ error: 'Unauthorized, token missing' });
    }

    // Assuming you are using JWT for authentication
    jwt.verify(token.split(' ')[1], process.env.JWT_SECRET, (err, user) => {
        if (err) {
            return res.status(403).json({ error: 'Forbidden, invalid token' });
        }
        req.user = user; // Store the user info from token
        next();
    });
};

// Fetch all reports
router.get('/', async (req, res) => {
    try {
        const reports = await Report.findAll();
        res.status(200).json(reports);
    } catch (err) {
        res.status(500).json({ error: 'Failed to fetch reports' });
    }
});

// Upload a new report (with authentication)
router.post('/', authenticateToken, upload.single('file'), async (req, res) => {
    const { name } = req.body;
    const file = req.file;

    if (!file || !name) {
        return res.status(400).json({ error: 'File and report name are required' });
    }

    try {
        const newReport = await Report.create({
            name: name,
            filePath: file.path, // Save the file path in the database
        });
        res.status(201).json(newReport); // This sends the new report back to the client
    } catch (err) {
        console.error(err); // Log the error for debugging
        res.status(500).json({ error: 'Failed to upload report' });
    }
});

// Delete a report
router.delete('/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const report = await Report.findByPk(id);
        if (!report) return res.status(404).json({ error: 'Report not found' });

        // Delete the file from the server
        fs.unlinkSync(report.filePath);

        await report.destroy();
        res.status(200).json({ message: 'Report deleted' });
    } catch (err) {
        res.status(500).json({ error: 'Failed to delete report' });
    }
});


module.exports = router;


================================================
File: server/routes/uploadRoutes.js
================================================
    // server/routes/uploadRoutes.js
    const express = require('express');
    const upload = require('../middleware/uploadMiddleware');
    const { protect } = require('../middleware/authMiddleware');
    const router = express.Router();

    router.post('/', protect, upload.single('file'), (req, res) => {
        res.status(200).json({ message: 'File uploaded successfully', file: req.file });
    });

    module.exports = router;

================================================
File: server/routes/userRoutes.js
================================================
const express = require('express');
//const { registerUser, loginUser } = require('../controllers/userController');
//const { protect } = require('../middleware/authMiddleware');
//const { roleCheck } = require('../middleware/roleMiddleware');
const bcrypt = require('bcrypt');
const User = require('../models/User');
const router = express.Router();
const jwt = require('jsonwebtoken');

// JWT Secret - Replace this with a secure secret in production
const JWT_SECRET = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInVzZXJuYW1lIjoidGVzdHVzZXIiLCJpYXQiOjE3MzAwMzE3MTF9.YMM6GDQE4-UlhWBiOhnoK9EtHxvm5rd5l-327P5KEfA';

// Register route
router.post('/register', async (req, res) => {
    const { aadharNumber, name, password, role } = req.body;

    try {
        const hashedPassword = await bcrypt.hash(password, 10);
        const user = await User.create({
            aadharNumber,
            name,
            password: hashedPassword,
            role
        });
        res.status(201).json({ user });
    } catch (err) {
        console.error('Error creating user: ', err);
        res.status(500).json({ error: 'Error creating user' });
    }
});

function generateToken(user) {
    return jwt.sign({ id: user.id, role: user.role }, JWT_SECRET, { expiresIn: '1h' });
}
// Login route
router.post('/login', async (req, res) => {
    const { aadharNumber, password } = req.body;

    try {
        const user = await User.findOne({ where: { aadharNumber } });

        if (!user) {
            return res.status(401).json({ error: 'Invalid Aadhar Number or Password' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(401).json({ error: 'Invalid Aadhar Number or Password' });
        }

        // Debugging: Log the user role
        console.log(`User role: ${user.role}`);

        const token = generateToken(user);

        let redirectUrl;
        if (user.role === 'patient'  || user.role === 'Normal Patient') {
            redirectUrl = '/normal-patient';
        } else if (user.role === 'doctor' || user.role === 'Hospital Doc') {
            redirectUrl = '/dashboard';
        } else {
            return res.status(400).json({ error: 'Invalid user role' });
        }

        // Debugging: Log the redirectUrl before sending the response
        console.log(`Redirect URL before sending response: ${redirectUrl}`);

        // Respond with user data, token, and redirect URL
        return res.status(200).json({ token, redirectUrl });
    } catch (err) {
        console.error('Error occurred:', err);
        return res.status(500).json({ error: 'Error logging in' });
    }
});


module.exports = router;

================================================
File: src/App.css
================================================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


================================================
File: src/App.js
================================================
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import HomePage from './pages/HomePage';
import RegisterPage from './pages/RegisterPage';
import LoginPage from './pages/LoginPage';
import NormalPatient from './components/NormalPatient';
import Dashboard from './components/Dashboard';
import ForumUser from './components/ForumUser';
import { AuthProvider } from './components/AuthContext';
import ProtectedRoute from './components/ProtectedRoute';
import NurseDashboard from './components/NurseDashboard';
import LabStaffDashboard from './components/LabStaffDashboard';
import PharmacyDashboard from './components/PharmacyDashboard';
import Nominee from './components/Nominee';



function App() {
    return (
        <AuthProvider>
        <Router>
            <Routes>
                <Route path="/" element={<HomePage />} />
                <Route path="/register" element={<RegisterPage />} />
                <Route path="/login" element={<LoginPage />} />
                <Route
                    path="/normal-patient"
                    element={
                        <ProtectedRoute>
                            <NormalPatient />
                        </ProtectedRoute>
                    }
                />
                <Route path="/dashboard" element={
                    <ProtectedRoute>
                    <Dashboard />
                    </ProtectedRoute>
                    } />
                <Route path="/forumuser" element={<ForumUser />} />
                <Route path="/nursedashboard" element={<NurseDashboard />} />
                <Route path="/labstaffdashboard" element={<LabStaffDashboard />} />
                <Route path="/pharmacydashboard" element={<PharmacyDashboard />} />
                <Route path="/nominee" element={<Nominee />} />
            </Routes>
        </Router>
        </AuthProvider>
    );
}

export default App;


================================================
File: src/App.test.js
================================================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


================================================
File: src/i18n.js
================================================
// client/src/i18n.js
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';

const resources = {
    en: {
        translation: {
            "Welcome": "Welcome to HealthLink Central",
            "Login": "Login",
            "Register": "Register",
            "Aadhar Number": "Aadhar Number",
            "Password": "Password",
            "Name": "Name",
            "Upload": "Upload",
            // Add English translations for user types
            "Normal Patient": "Normal Patient",
            "Forum User": "Forum User",
            "Fam Doc": "Fam Doc",
            "Hospital Doc": "Hospital Doc",
            "Nurse/Ward Boy": "Nurse/Ward Boy",
            "Pharmacy": "Pharmacy",
            "Lab Staff": "Lab Staff"
        }
    },
    hi: {
        translation: {
            "Welcome": "हेल्थलिंक सेंट्रल में आपका स्वागत है",
            "Login": "लॉगिन",
            "Register": "रजिस्टर",
            "Aadhar Number": "आधार नंबर",
            "Password": "पासवर्ड",
            "Name": "नाम",
            "Upload": "अपलोड",
            // Add Hindi translations for user types
            "Normal Patient": "साधारण मरीज",
            "Forum User": "फोरम उपयोगकर्ता",
            "Fam Doc": "परिवार के डॉक्टर",
            "Hospital Doc": "अस्पताल डॉक्टर",
            "Nurse/Ward Boy": "नर्स/वार्ड बॉय",
            "Pharmacy": "फार्मेसी",
            "Lab Staff": "लैब स्टाफ"
        }
    },
    mar: {
        translation: {
            "Welcome": "हेल्थलिंक सेंट्रल मध्ये आपला स्वागत आहे",
            "Login": "लॉगिन",
            "Register": "रजिस्टर",
            "Aadhar Number": "आधार नंबर",
            "Password": "पासवर्ड",
            "Name": "नाव",
            "Upload": "अपलोड",
            // Add Marathi translations for user types
            "Normal Patient": "सामान्य रुग्ण",
            "Forum User": "फोरम वापरकर्ता",
            "Fam Doc": "कुटुंब डॉक्टर",
            "Hospital Doc": "रुग्णालयातील डॉक्टर",
            "Nurse/Ward Boy": "नर्स/वार्ड बॉय",
            "Pharmacy": "फार्मसी",
            "Lab Staff": "लॅब स्टाफ"
        }
    }
};

i18n.use(initReactI18next).init({
    resources,
    lng: 'en',
    interpolation: {
        escapeValue: false
    }
});

export default i18n;


================================================
File: src/index.css
================================================
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


================================================
File: src/index.js
================================================
import reportWebVitals from './reportWebVitals';

// client/src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import './i18n';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

reportWebVitals();

================================================
File: src/reportWebVitals.js
================================================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


================================================
File: src/setupTests.js
================================================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


================================================
File: src/components/AuthContext.js
================================================
import React, { createContext, useContext, useState, useEffect } from 'react';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
    const [isAuthenticated, setIsAuthenticated] = useState(false);

    useEffect(() => {
        const token = localStorage.getItem('authToken');
        if (token) {
            // Optionally verify token validity here
            setIsAuthenticated(true);
        }
    }, []);
    

    const login = () => {
        setIsAuthenticated(true);
    };

    const logout = () => {
        setIsAuthenticated(false);
    };

    return (
        <AuthContext.Provider value={{ isAuthenticated, login, logout }}>
            {children}
        </AuthContext.Provider>
    );
};

export const useAuth = () => {
    return useContext(AuthContext);
};


================================================
File: src/components/Dashboard.js
================================================
import React, { useState, useRef, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { Line } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';
import { FiLogOut } from 'react-icons/fi';
import { FaArrowUp } from 'react-icons/fa';
import logo from '../images/logo.png';
import io from 'socket.io-client';

ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);

const socket = io('http://localhost:5001');


const Dashboard = () => {

    const [data, setData] = useState({
        labels: [],
        datasets: [
            {
                label: 'Appointments',
                data: [],
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1,
            },
        ],
    });

    const [appointments, setAppointments] = useState([]);
    const [postponedAppointments, setPostponedAppointments] = useState([]);
    const [completedAppointments, setCompletedAppointments] = useState([]);
    const [metrics, setMetrics] = useState({
        waitingToConsult: 0,
        totalPrescribedCount: 0,
        appointmentsForTomorrow: 0,
    });
    const [newAppointment, setNewAppointment] = useState({ name: '', time: '' });

    useEffect(() => {
        const fetchAppointments = async () => {
            try {
                const response = await axios.get('http://localhost:5001/api/dashboard_appointments');
                setAppointments(response.data);
                updateMetrics(response.data); // Update metrics with fetched data
                initializeChart(response.data);
            } catch (error) {
                console.error('Error fetching appointments:', error);
            }
        };

        fetchAppointments();
        const intervalId = setInterval(fetchAppointments, 5000); // Poll every 5 seconds

        // Socket setup for real-time synchronization
        socket.on('connect', () => console.log('Connected to Socket.io server'));
        socket.on('updateAppointment', handleSocketUpdate);

        return () => {
            clearInterval(intervalId);
            socket.off('updateAppointment', handleSocketUpdate);
        };
    }, []);

    // Function to initialize chart data
    const initializeChart = (appointmentsData) => {
        const labels = appointmentsData.map(app => app.time);
        const dataPoints = appointmentsData.map((_, index) => index + 1);
        setData(prevData => ({
            ...prevData,
            labels,
            datasets: [{ ...prevData.datasets[0], data: dataPoints }],
        }));
    };

    // Metrics updater
    const updateMetrics = (appointmentsData) => {
        const waitingToConsult = appointmentsData.filter(app => app.status === 'Pending').length;
        const totalPrescribedCount = appointmentsData.length; // Total count or other logic
        const appointmentsForTomorrow = appointmentsData.filter(app =>
            new Date(app.time).setHours(0, 0, 0, 0) === new Date().setHours(0, 0, 0, 0) + 86400000
        ).length;

        setMetrics({ waitingToConsult, totalPrescribedCount, appointmentsForTomorrow });
    };

    // Handle socket updates and update chart data in real time
    const handleSocketUpdate = ({ action, data, id }) => {
        setAppointments(prevAppointments => {
            let updatedAppointments;
            switch (action) {
                case 'add':
                    updatedAppointments = [...prevAppointments, data];
                    updateChartData(data);
                    break;
                case 'delete':
                    updatedAppointments = prevAppointments.filter(app => app.id !== id);
                    break;
                case 'postpone':
                case 'complete':
                    updatedAppointments = prevAppointments.map(app => (app.id === data.id ? data : app));
                    break;
                default:
                    updatedAppointments = prevAppointments;
            }
            updateMetrics(updatedAppointments);
            return updatedAppointments;
        });
    };


   // Update chart data when a new appointment is added
   const updateChartData = (appointment) => {
    setData(prevData => ({
        ...prevData,
        labels: [...prevData.labels, appointment.time],
        datasets: [{
            ...prevData.datasets[0],
            data: [...prevData.datasets[0].data, prevData.datasets[0].data.length + 1],
        }],
    }));
};

    const handleAddAppointment = async () => {
        try {
            const response = await axios.post('http://localhost:5001/api/dashboard_appointments', newAppointment);
            setNewAppointment({ name: '', time: '' });
            updateChartData(response.data);
            updateMetrics([...appointments, response.data]);
            socket.emit('updateAppointment', { action: 'add', data: response.data });
        } catch (err) {
            console.error('Error adding appointment:', err);
        }
    };

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setNewAppointment({ ...newAppointment, [name]: value });
    };

    const [reports, setReports] = useState([]); // To store uploaded reports
    const [file, setFile] = useState(null); // To handle file input
    const [reportName, setReportName] = useState(''); // To name the report

    const handleScroll = () => {
        const sections = [
            { ref: dashboardRef, id: 'Dashboard' },
            { ref: schedulerRef, id: 'Scheduler' },
            { ref: reportsRef, id: 'Reports' },
        ];

        const scrollPosition = window.scrollY;

        sections.forEach(({ ref, id }) => {
            if (ref.current) {
                const sectionTop = ref.current.getBoundingClientRect().top + window.scrollY;
                const sectionBottom = sectionTop + ref.current.clientHeight;

                if (scrollPosition >= sectionTop && scrollPosition < sectionBottom) {
                    setActiveTab(id);
                }
            }
        });
    };

   

    useEffect(() => {
        const fetchReports = async () => {
            try {
                const response = await axios.get('http://localhost:5001/api/dashboard_reports');
                setReports(response.data);
            } catch (error) {
                console.error('Error fetching Dashboard Reports:', error);
            }
        };
        fetchReports();
    }, []);

    const handleUploadReport = async (e) => {
        e.preventDefault();
        if (file && reportName) {
            const formData = new FormData();
            formData.append('file', file);
            formData.append('name', reportName);
    
            const token = localStorage.getItem('token');
    
            try {
                const response = await axios.post('http://localhost:5001/api/dashboard_reports', formData, {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                    },
                });
                setReports((prev) => [...prev, response.data]);
                setReportName('');
                setFile(null);
            } catch (error) {
                console.error('Error uploading report:', error);
                alert('Error uploading report: ' + error.response?.data?.error || error.message);
            }
        } else {
            alert("Please select a file and provide a report name.");
        }
    };
    

    const handleDeleteReport = async (id) => {

        const token = localStorage.getItem('token'); // Retrieve the token

        try {
            await axios.delete(`http://localhost:5001/api/dashboard_reports/${id}`, {
                headers: {
                    'Authorization': `Bearer ${token}`, // Make sure to include the token if needed
                },
            });
            // Update the state to remove the deleted report
            const updatedReports = reports.filter(report => report.id !== id);
            setReports(updatedReports);
        } catch (error) {
            console.error('Error deleting report:', error);
        }
    };


    // Effect to add scroll event listener
    useEffect(() => {
        window.addEventListener('scroll', handleScroll);
        return () => {
            window.removeEventListener('scroll', handleScroll);
        };
    }, []);


    const handlePostponeAppointment = async (id) => {
        try {
            const response = await axios.patch(`http://localhost:5001/api/dashboard_appointments/postpone/${id}`);
            setPostponedAppointments([...postponedAppointments, response.data]);
            updateMetrics([...appointments.filter(app => app.id !== id), response.data]);
            socket.emit('updateAppointment', { action: 'postpone', data: response.data, id });
        } catch (err) {
            console.error('Error postponing appointment:', err);
        }
    };

    const handleCompleteAppointment = async (id) => {
        try {
            const response = await axios.patch(`http://localhost:5001/api/dashboard_appointments/complete/${id}`);
            setCompletedAppointments([...completedAppointments, response.data]);
            updateMetrics([...appointments.filter(app => app.id !== id), response.data]);
            socket.emit('updateAppointment', { action: 'complete', data: response.data, id });
        } catch (err) {
            console.error('Error completing appointment:', err);
        }
    };

    const handleDeleteCompletedAppointment = async (id) => {
        try {
            await axios.delete(`http://localhost:5001/api/dashboard_appointments/${id}`);
            setCompletedAppointments(completedAppointments.filter(app => app.id !== id));
            socket.emit('updateAppointment', { action: 'delete', id });
        } catch (err) {
            console.error('Error deleting appointment:', err);
        }
    };

    const handleMoveUpPostponedAppointment = (id) => {
        const appointment = postponedAppointments.find(app => app.id === id);
        setPostponedAppointments(postponedAppointments.filter(app => app.id !== id));
        const updatedAppointment = { ...appointment, status: 'Pending' };
        setAppointments([...appointments, updatedAppointment]);
        socket.emit('updateAppointment', { action: 'add', data: updatedAppointment });
    };

    const navigate = useNavigate();

    
    const [activeTab, setActiveTab] = useState('Dashboard');

    const dashboardRef = useRef(null);
    const schedulerRef = useRef(null);
    const reportsRef = useRef(null);


    const handleLogout = () => {
        navigate("/login");
    };

    const handleScrollToSection = (section) => {
        setActiveTab(section);
    
        switch (section) {
            case 'Dashboard':
                if (dashboardRef.current) {
                    dashboardRef.current.scrollIntoView({ behavior: 'smooth' });
                }
                break;
            case 'Scheduler':
                if (schedulerRef.current) {
                    schedulerRef.current.scrollIntoView({ behavior: 'smooth' });
                }
                break;
            case 'Reports':
                if (reportsRef.current) {
                    reportsRef.current.scrollIntoView({ behavior: 'smooth' });
                }
                break;
            default:
                break;
        }
    };
    

    useEffect(() => {
        socket.on('appointmentUpdate', (newAppointment) => {
            setData((prevData) => ({
                ...prevData,
                labels: [...prevData.labels, newAppointment.date],
                datasets: [
                    {
                        ...prevData.datasets[0],
                        data: [...prevData.datasets[0].data, newAppointment.count],
                    },
                ],
            }));
        });
    
        return () => socket.off('appointmentUpdate');
    }, []);
    
    

    useEffect(() => {
        socket.on('connect', () => console.log('Connected to socket server'));
        socket.on('disconnect', () => console.log('Disconnected from socket server'));
    
        return () => {
            socket.off('connect');
            socket.off('disconnect');
        };
    }, []);
    
    
    

    return (
        <div style={styles.dashboardContainer}>
            <nav style={styles.sidebar}>
                <div style={styles.logoContainer}>
                    <img src={logo} alt="Logo" style={styles.logo} />
                </div>

                <ul style={styles.navList}>
                    <li>
                        <span
                            onClick={() => handleScrollToSection('Dashboard')}
                            style={{
                                ...styles.navItem,
                                ...(activeTab === 'Dashboard' ? styles.activeNavItem : {}),
                            }}
                        >
                            Dashboard
                        </span>
                    </li>
                    <li>
                        <span
                            onClick={() => handleScrollToSection('Scheduler')}
                            style={{
                                ...styles.navItem,
                                ...(activeTab === 'Scheduler' ? styles.activeNavItem : {}),
                            }}
                        >
                            Scheduler
                        </span>
                    </li>
                    <li>
                        <span
                            onClick={() => handleScrollToSection('Reports')}
                            style={{
                                ...styles.navItem,
                                ...(activeTab === 'Reports' ? styles.activeNavItem : {}),
                            }}
                        >
                            Reports
                        </span>
                    </li>
                </ul>

                <div style={styles.bottomNav}>
                    <ul style={styles.navList}>
                        <li>
                            <Link to="/dashboard" style={styles.navItem}>Profile</Link>
                        </li>
                        <li>
                            <Link to="/dashboard" style={styles.navItem}>Settings</Link>
                        </li>
                        <li style={styles.navItem} onClick={handleLogout}><FiLogOut /> Log Out</li>
                    </ul>
                </div>
            </nav>

            <main style={styles.mainContent}>
            <header style={styles.header}>
                <div style={styles.metricsContainer}>
                    <div style={styles.metricCard}>{metrics.waitingToConsult} Waiting to Consult</div>
                    <div style={styles.metricCard}>{metrics.totalPrescribedCount} Total Completed Count</div>
                    <div style={styles.metricCard}>{metrics.appointmentsForTomorrow} Appointments for Tomorrow</div>
                </div>
            </header>

                {/* Scheduler section */}
                <div style={styles.dashboardContainer}>
            {/* Chart Section */}
            <section style={styles.chartsSection}>
                <div style={styles.chartContainer}>
                <h3>Real-Time Appointment Updates</h3>
                <Line data={data} />
                </div>
            </section>
        </div>
                <section style={styles.schedulerSection} ref={schedulerRef}>
                    <h2>Scheduler</h2>
                    {/* Add new appointment */}
                    <div>
                        <h3>Add New Appointment</h3>
                        <input
                            type="text"
                            name="name"
                            placeholder="Patient Name"
                            value={newAppointment.name}
                            onChange={handleInputChange}
                            style={styles.input}
                        />
                        <input
                            type="text"
                            name="time"
                            placeholder="Appointment Time"
                            value={newAppointment.time}
                            onChange={handleInputChange}
                            style={styles.input}
                        />
                        <button onClick={handleAddAppointment} style={styles.button}>Add Appointment</button>
                    </div>

                    {/* Upcoming appointments */}
                    <div>
                        <h3>Upcoming Appointments</h3>
                        <ul>
                            {appointments.map((appointment) => (
                                <li key={appointment.id} style={styles.appointmentItem}>
                                    {appointment.name} - {appointment.time} - {appointment.status}
                                    <button onClick={() => handleCompleteAppointment(appointment.id)} style={styles.button}>
                                        Done with Appointment
                                    </button>
                                    <button onClick={() => handlePostponeAppointment(appointment.id)} style={styles.button}>
                                        Postpone
                                    </button>
                                </li>
                            ))}
                        </ul>
                    </div>

                    {/* Completed appointments */}
                    <div>
                        <h3>Completed Appointments</h3>
                        <ul>
                            {completedAppointments.map((appointment) => (
                                <li key={appointment.id} style={styles.appointmentItem}>
                                    {appointment.name} - {appointment.time} - {appointment.status}
                                    <button onClick={() => handleDeleteCompletedAppointment(appointment.id)} style={styles.button}>
                                        Delete
                                    </button>
                                </li>
                            ))}
                        </ul>
                    </div>

                    {/* Postponed appointments */}
                    <div>
                        <h3>Postponed Appointments</h3>
                        <ul>
                            {postponedAppointments.map((appointment) => (
                                <li key={appointment.id} style={styles.appointmentItem}>
                                    {appointment.name} - {appointment.time} - {appointment.status}
                                    <button onClick={() => handleMoveUpPostponedAppointment(appointment.id)} style={styles.button}>
                                        <FaArrowUp />
                                    </button>
                                </li>
                            ))}
                        </ul>
                    </div>
                </section>

                {/* Reports section */}
                <section ref={reportsRef} style={styles.schedulerSection}>
                    <h2>Reports</h2>
                    <div style={styles.uploadSection}>
                        <h3>Upload New Report</h3>
                        <form onSubmit={handleUploadReport}>
                            <input
                                type="text"
                                placeholder="Report Name"
                                value={reportName}
                                onChange={(e) => setReportName(e.target.value)}
                                style={styles.input}
                                required
                            />
                            <input
                                type="file"
                                onChange={(e) => setFile(e.target.files[0])}
                                style={styles.fileInput}
                                required
                            />
                            <button type="submit" style={styles.button}>Upload Report</button>
                        </form>
                    </div>
                    <div style={styles.reportList}>
                        <h3>Uploaded Reports</h3>
                        {reports.length > 0 ? (
                            <ul>
                                {reports.map((report) => (
                                    <li key={report.id} style={styles.reportItem}>
                                        <span>{report.name}</span>
                                        <div style={styles.reportActions}>
                                            <a
                                                href={`http://localhost:5001/${report.filePath}`} // Adjust this to point correctly
                                                target="_blank"
                                                rel="noopener noreferrer"
                                                style={styles.downloadLink}
                                            >
                                                View
                                            </a>

                                            <button onClick={() => handleDeleteReport(report.id)} style={styles.deleteButton}>
                                                Delete
                                            </button>
                                        </div>
                                    </li>
                                ))}
                            </ul>
                        ) : (
                            <p>No reports uploaded yet.</p>
                        )}
                    </div>
                </section>
            </main>
        </div>
    );

    
};

const styles = {
    // Main container for the dashboard with flex layout and row direction for desktop view
    dashboardContainer: {
        display: 'flex',
        height: '100vh',
        fontFamily: "'Poppins', sans-serif",
        backgroundColor: '#f0f4f7',
        flexDirection: 'row', // Default row layout for larger screens
    },
    // Sidebar styling with fixed width, dark blue background, and column layout for navigation items
    sidebar: {
        width: '250px',
        backgroundColor: '#0d47a1',
        padding: '20px',
        color: '#fff',
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'space-between',
        boxShadow: '2px 0 5px rgba(0, 0, 0, 0.1)',
    },
     // Logo container within the sidebar, aligned to the right
    logoContainer: {
        textAlign: 'right',
        marginBottom: '20px',
    },
    // Logo image styling in the sidebar
    logo: {
        width: '120px',
        marginBottom: '20px',
        marginRight: '70px',
    },
     // Unordered list for navigation items in the sidebar
    navList: {
        listStyleType: 'none',
        padding: 0,
    },
    // Individual navigation item style, with border transition effect on hover
    navItem: {
        display: 'flex',
        alignItems: 'center',
        color: '#fff',
        padding: '10px',
        textDecoration: 'none',
        borderBottom: '2px solid transparent',
        transition: 'border-bottom 0.3s',
        cursor: 'pointer',
    },
    // Style for the active navigation item with a thick black bottom border
    activeNavItem: {
        borderBottom: '9px solid black',
    },
     // Style for hover effect on navigation items
    navItemHovered: {
        borderBottom: '9px solid #fff',
    },
    // Icon style for navigation items
    navItemIcon: {
        marginRight: '10px',
    },
    // Section for charts, centered with padding, used in the main content
    chartsSection: {
        display: 'flex',
        justifyContent: 'center',
        padding: '20px',
        width: '100%',
    },
    // Chart container for line graphs, with rounded corners and shadow effect
    chartContainer: {
        width: '80%',
        padding: '20px',
        borderRadius: '8px',
        backgroundColor: '#f9f9f9',
        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
    },
     // Main content area with padding and scrollable content, contains dashboard elements
    mainContent: {
        flex: 1,
        padding: '20px',
        backgroundColor: '#fff',
        overflowY: 'scroll',
    },
     // Header section for dashboard metrics with space between each metric
    header: {
        display: 'flex',
        justifyContent: 'space-between',
        marginBottom: '20px',
    },
    // Container for individual metric cards, allowing wrapping on smaller screens
    metricsContainer: {
        display: 'flex',
        justifyContent: 'space-around',
        width: '100%',
        flexWrap: 'wrap', // Allow wrapping for smaller screens
    },
    // Individual card style for metrics like appointment counts, with shadow and center alignment
    metricCard: {
        backgroundColor: '#f0f0f0',
        padding: '40px',
        borderRadius: '8px',
        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
        width: '22%',
        textAlign: 'center',
        fontWeight: 'bold',
        margin: '10px', // Add margin for better spacing on wrap
    },
    pieChartContainer: {
        width: '30%',
        padding: '20px',
        borderRadius: '8px',
        backgroundColor: '#f9f9f9',
        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
    },
    // Style for the bottom navigation section in the sidebar, with a top border
    bottomNav: {
        paddingTop: '20px',
        borderTop: '1px solid #fff',
    },
    schedulerSection: {
        padding: '20px',
        backgroundColor: '#f9f9f9',
        borderRadius: '8px',
        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
        marginBottom: '20px',
    },
    // Container for form inputs and controls in the scheduler section
    formContainer: {
        display: 'flex',
        justifyContent: 'space-between',
        marginBottom: '20px',
        flexWrap: 'wrap', // Allow form fields to wrap on smaller screens
    },
    // Focus effect for inputs in the form, changing border color
    inputFocus: {
        borderColor: '#0d47a1',
    },
    // Hover effect for buttons, changing background color to a darker shade
    buttonHover: {
        backgroundColor: '#063373',
    },
    appointmentList: {
        marginBottom: '20px',
    },
    appointmentCard: {
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: '10px',
        backgroundColor: '#fff',
        borderRadius: '5px',
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
        marginBottom: '10px',
        animation: 'fadeIn 0.5s ease-in-out',
    },
    postponeButton: {
        backgroundColor: '#ff9800',
        color: '#fff',
        border: 'none',
        borderRadius: '5px',
        padding: '5px 10px',
        cursor: 'pointer',
    },
    postponedStatus: {
        color: '#ff5722',
        fontWeight: 'bold',
    },
    // Style for individual list items in the appointment list
    appointmentItem: {
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        backgroundColor: '#f9f9f9',
        padding: '10px',
        marginBottom: '10px',
        borderRadius: '8px',
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
    },
     // Style for buttons, applied across multiple sections like adding appointments or reports
    button: {
        backgroundColor: '#0d47a1',
        color: '#fff',
        border: 'none',
        borderRadius: '4px',
        padding: '8px 12px',
        cursor: 'pointer',
        marginLeft: '10px',
    },
     // Input styling for text and date inputs in forms
    input: {
        marginRight: '10px',
        padding: '8px',
        borderRadius: '4px',
        border: '1px solid #ccc',
    },
    // Styling for the section where new reports are uploaded
    uploadSection: {
        marginBottom: '20px',
        padding: '15px',
        backgroundColor: '#f8f9fa',
        borderRadius: '5px',
    },
    // Styling for file input within the upload section
    fileInput: {
        margin: '5px 0',
    },
    // List of uploaded reports, with top margin for spacing
    reportList: {
        marginTop: '15px',
    },
     // Style for each report item in the list of uploaded reports
    reportItem: {
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: '10px',
        borderBottom: '1px solid #ccc',
    },
    // Link style for downloading/viewing reports, with blue color and no underline
    downloadLink: {
        color: '#007bff',
        textDecoration: 'none',
    },
    // General section margin-top for consistency in spacing
    section: {
        marginTop: '20px',
    },
     // Delete button style used in various sections for removing items
    deleteButton: {
        padding: '10px 10px',
        backgroundColor: '#dc3545',
        color: '#fff',
        border: 'none',
        borderRadius: '5px',
        cursor: 'pointer',
        marginLeft: '25px'
    },
    '@keyframes fadeIn': {
        from: { opacity: 0 },
        to: { opacity: 1 },
    },

    // Responsive styling
    '@media (max-width: 1024px)': { // Tablet
        dashboardContainer: {
            flexDirection: 'column',
        },
        sidebar: {
            width: '100%',
            padding: '15px',
            position: 'relative', // Positioned on top for tablet view
        },
        metricsContainer: {
            flexDirection: 'column',
            gap: '15px',
        },
        metricCard: {
            width: '100%',
            padding: '20px',
        },
        chartContainer: {
            width: '90%',
            padding: '15px',
        },
        pieChartContainer: {
            width: '90%',
            padding: '15px',
        },
    },
     // Responsive styling for small tablets and large phones
    '@media (max-width: 768px)': { // Small tablets and large phones
        formContainer: {
            flexDirection: 'column',
            gap: '15px',
        },
        button: {
            width: '100%',
        },
        sidebar: {
            width: '100%',
            padding: '10px',
            boxShadow: 'none', // Simplify for small screens
        },
        chartContainer: {
            width: '100%',
            padding: '10px',
        },
        pieChartContainer: {
            width: '100%',
            padding: '10px',
        },
    },
    '@media (max-width: 480px)': { // Mobile
        sidebar: {
            width: '100%',
            padding: '5px 10px',
        },
        logo: {
            width: '80px',
            margin: '0 auto 10px auto', // Center logo for better fit
        },
        navItem: {
            padding: '8px 5px',
            fontSize: '0.9rem',
        },
        metricCard: {
            width: '100%',
            padding: '15px',
            margin: '10px 0', // Add spacing between cards
        },
        chartContainer: {
            width: '100%',
            padding: '8px',
        },
        formContainer: {
            flexDirection: 'column',
            gap: '10px',
        },
        appointmentCard: {
            padding: '8px',
            fontSize: '0.9rem',
        },
        deleteButton: {
            width: '100%', // Full width for accessibility
            textAlign: 'center',
            margin: '10px 0', 
        },
    },
};


export default Dashboard;

================================================
File: src/components/ForumUser.js
================================================
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";

const ForumUser = () => {
  const navigate = useNavigate();

  // const handleLogout = () => {
  //   navigate("/login");
  // };

  // Hover state to track which section is being hovered
  const [hover, setHover] = useState(null);

  // Handle hover state
  const handleMouseEnter = (index) => setHover(index);
  const handleMouseLeave = () => setHover(null);

  return (
    <div style={styles.forumContainer}>
      <nav style={styles.navbar}>
        <h1>HealthLink Central</h1>
        {/*<button onClick={handleLogout} style={styles.logoutBtn}>Logout</button>*/}
      </nav>

      <div style={styles.sectionWrapper}>
        {sections.map((section, index) => (
          <div
            key={index}
            style={{
              ...styles.section,
              ...(hover === index ? styles.sectionHover : {}), // Apply hover style conditionally
            }}
            onMouseEnter={() => handleMouseEnter(index)} // Set hover state on mouse enter
            onMouseLeave={handleMouseLeave} // Reset hover state on mouse leave
          >
            <img src={section.imgSrc} alt={section.alt} style={styles.slideIn} />
            <div style={styles.textContent}>
              <h2 style={styles.heading}>{section.title}</h2>
              <ul>
                {section.details.map((detail, i) => (
                  <li key={i}>{detail}</li>
                ))}
              </ul>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

const sections = [
  {
    imgSrc: "/images/vision.png",
    alt: "Vision",
    title: "VISION",
    details: ["Streamlining healthcare for a frictionless patient experience"],
  },
  {
    imgSrc: "/images/goals.png",
    alt: "Goals",
    title: "GOALS",
    details: [
      "Maintain centralized, digitally interoperable medical health records",
      "Ensure ease of access and use for a wide population",
      "Ensure strict privacy for medical records",
    ],
  },
  {
    imgSrc: "/images/objectives.png",
    alt: "Objectives",
    title: "OBJECTIVES",
    details: [
      "Implement a unique patient ID system linking all services",
      "Develop a secure, centralized system for medical records sharing",
      "User-friendly interface in regional languages",
      "Emergency access system for critical information",
    ],
  },
  {
    imgSrc: "/images/requirement.png",
    alt: "Must Requirements",
    title: "MUST",
    details: [
      "Unique patient ID linked to Aadhar Number",
      "Secure, centralized database with encryption (RSA, AES 256)",
      "Integration of old records for new users (CSV, PDF support)",
      "Multilingual and responsive design",
    ],
  },
];

const styles = {
  forumContainer: {
    fontFamily: 'Arial, sans-serif',
    backgroundColor: '#f7f8fa',
    padding: '20px',
  },
  navbar: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: '#0052cc',
    padding: '15px 30px',
    color: 'white',
    fontSize: '1.5rem',
  },
  logoutBtn: {
    padding: '10px 20px',
    backgroundColor: '#ff4d4d',
    border: 'none',
    color: 'white',
    cursor: 'pointer',
    borderRadius: '5px',
    fontSize: '1rem',
  },
  sectionWrapper: {
    marginTop: '30px',
  },
  section: {
    display: 'flex',
    alignItems: 'center',
    marginBottom: '40px',
    backgroundColor: 'white',
    padding: '20px',
    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
    borderRadius: '10px',
    animation: 'fadeIn 0.5s ease-in-out',
    transition: 'transform 0.3s ease, box-shadow 0.3s ease', // Add transition for smooth hover animation
  },
  sectionHover: {
    transform: 'scale(1.02)', // Scale up on hover
    boxShadow: '0 8px 16px rgba(0, 0, 0, 0.2)', // Increase shadow on hover
  },
  textContent: {
    flex: 1,
    paddingLeft: '20px',
  },
  heading: {
    color: '#0052cc',
    fontSize: '1.8rem',
  },
  slideIn: {
    width: '150px',
    height: '150px',
    borderRadius: '10px',
    animation: 'slideIn 1s ease-in-out',
  },
  '@keyframes slideIn': {
    '0%': {
      opacity: 0,
      transform: 'translateX(-50%)',
    },
    '100%': {
      opacity: 1,
      transform: 'translateX(0)',
    },
  },
};

export default ForumUser;


================================================
File: src/components/LabStaffDashboard.js
================================================
import React, { useState } from 'react';
import { Line } from 'react-chartjs-2';
import 'chart.js/auto'; // Import chart.js automatically for chart rendering

const LabStaffDashboard = () => {
    // Dummy data for vitals and prescriptions
    const vitals = {
        heartRate: [65, 70, 72, 68, 75, 78],
        oxygenLevels: [98, 97, 96, 95, 98, 99],
        timestamps: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
    };

    const prescriptions = [
        { name: 'Amoxicillin', dosage: '500mg', frequency: 'Three times a day' },
        { name: 'Ciprofloxacin', dosage: '250mg', frequency: 'Twice a day' },
        { name: 'Paracetamol', dosage: '500mg', frequency: 'When needed' },
    ];

    return (
        <div style={styles.labDashboard}>
            <h2 style={styles.heading}>Lab Staff Dashboard</h2>

            {/* Patient Vitals */}
            <div style={styles.section}>
                <h3 style={styles.sectionTitle}>Patient Vitals</h3>
                <div style={styles.chartContainer}>
                    <h4 style={styles.chartTitle}>Heart Rate</h4>
                    <Line
                        data={{
                            labels: vitals.timestamps,
                            datasets: [
                                {
                                    label: 'Heart Rate (bpm)',
                                    data: vitals.heartRate,
                                    fill: false,
                                    borderColor: 'rgba(75,192,192,1)',
                                    tension: 0.1,
                                },
                            ],
                        }}
                        options={{
                            scales: {
                                y: {
                                    beginAtZero: false,
                                },
                            },
                        }}
                    />
                </div>

                <div style={styles.chartContainer}>
                    <h4 style={styles.chartTitle}>Oxygen Levels</h4>
                    <Line
                        data={{
                            labels: vitals.timestamps,
                            datasets: [
                                {
                                    label: 'Oxygen Levels (%)',
                                    data: vitals.oxygenLevels,
                                    fill: false,
                                    borderColor: 'rgba(54,162,235,1)',
                                    tension: 0.1,
                                },
                            ],
                        }}
                        options={{
                            scales: {
                                y: {
                                    beginAtZero: false,
                                },
                            },
                        }}
                    />
                </div>
            </div>

            {/* Prescriptions */}
            <div style={styles.section}>
                <h3 style={styles.sectionTitle}>Patient Prescriptions</h3>
                <ul style={styles.prescriptionList}>
                    {prescriptions.map((prescription, index) => (
                        <li key={index} style={styles.prescriptionItem}>
                            <strong>{prescription.name}</strong> - {prescription.dosage} ({prescription.frequency})
                        </li>
                    ))}
                </ul>
            </div>
        </div>
    );
};

const styles = {
    labDashboard: {
        padding: '20px',
        maxWidth: '900px',
        margin: '0 auto',
        backgroundColor: '#f9f9f9',
        borderRadius: '8px',
        boxShadow: '0px 4px 8px rgba(0,0,0,0.1)',
    },
    heading: {
        fontSize: '2em',
        textAlign: 'center',
        marginBottom: '20px',
        color: '#333',
    },
    section: {
        marginBottom: '40px',
        padding: '10px',
        backgroundColor: '#fff',
        borderRadius: '8px',
        boxShadow: '0px 2px 4px rgba(0,0,0,0.1)',
    },
    sectionTitle: {
        fontSize: '1.5em',
        marginBottom: '20px',
        color: '#555',
    },
    chartContainer: {
        marginBottom: '30px',
    },
    chartTitle: {
        fontSize: '1.2em',
        marginBottom: '10px',
        color: '#666',
    },
    prescriptionList: {
        listStyleType: 'none',
        padding: 0,
    },
    prescriptionItem: {
        padding: '10px',
        borderBottom: '1px solid #ccc',
        color: '#555',
    },
};

export default LabStaffDashboard;


================================================
File: src/components/Nominee.js
================================================
import React, { useState } from "react";

const NomineePage = () => {
  const [nomineeDetails, setNomineeDetails] = useState({
    name: "",
    aadharNumber: "",
    phoneNumber: "",
    relation: "",
    signature: "",
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setNomineeDetails((prevDetails) => ({
      ...prevDetails,
      [name]: value,
    }));
  };

  const handleSignatureChange = (e) => {
    setNomineeDetails((prevDetails) => ({
      ...prevDetails,
      signature: e.target.files[0],
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    alert("Nominee details submitted successfully!");
  };

  return (
    <div style={styles.pageContainer}>
      <div style={styles.card}>
        <h1 style={styles.header}>Add a Nominee</h1>
        <p style={styles.description}>
          Please provide the nominee's details to proceed. This information will remain confidential.
        </p>
        <form onSubmit={handleSubmit} style={styles.form}>
          <div style={styles.formGroup}>
            <label style={styles.label}>Name of the Nominee</label>
            <input
              type="text"
              name="name"
              value={nomineeDetails.name}
              onChange={handleChange}
              placeholder="Enter nominee's name"
              style={styles.input}
              required
            />
          </div>

          <div style={styles.formGroup}>
            <label style={styles.label}>Aadhar Number</label>
            <input
              type="text"
              name="aadharNumber"
              value={nomineeDetails.aadharNumber}
              onChange={handleChange}
              placeholder="Enter Aadhar number"
              style={styles.input}
              required
            />
          </div>

          <div style={styles.formGroup}>
            <label style={styles.label}>Phone Number</label>
            <input
              type="tel"
              name="phoneNumber"
              value={nomineeDetails.phoneNumber}
              onChange={handleChange}
              placeholder="Enter phone number"
              style={styles.input}
              required
            />
          </div>

          <div style={styles.formGroup}>
            <label style={styles.label}>Relation to the Patient</label>
            <select
              name="relation"
              value={nomineeDetails.relation}
              onChange={handleChange}
              style={styles.select}
              required
            >
              <option value="">Select relation</option>
              <option value="Spouse">Spouse</option>
              <option value="Parent">Parent</option>
              <option value="Child">Child</option>
              <option value="Sibling">Sibling</option>
              <option value="Other">Other</option>
            </select>
          </div>

          <div style={styles.formGroup}>
            <label style={styles.label}>Patient's Electronic Signature</label>
            <input
              type="file"
              name="signature"
              accept="image/*"
              onChange={handleSignatureChange}
              style={styles.fileInput}
              required
            />
          </div>

          <button type="submit" style={styles.submitButton}>
            Submit Details
          </button>
        </form>
      </div>
    </div>
  );
};

// Enhanced CSS styles
const styles = {
  pageContainer: {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    minHeight: "100vh",
    backgroundColor: "#f4f6f9",
    padding: "20px",
  },
  card: {
    backgroundColor: "#ffffff",
    padding: "30px",
    borderRadius: "12px",
    boxShadow: "0px 4px 20px rgba(0, 0, 0, 0.1)",
    maxWidth: "500px",
    width: "100%",
    textAlign: "center",
  },
  header: {
    fontSize: "28px",
    color: "#333333",
    marginBottom: "15px",
    fontWeight: "600",
  },
  description: {
    fontSize: "14px",
    color: "#666666",
    marginBottom: "20px",
  },
  form: {
    display: "flex",
    flexDirection: "column",
    gap: "20px",
  },
  formGroup: {
    textAlign: "left",
  },
  label: {
    fontSize: "16px",
    color: "#333333",
    marginBottom: "5px",
    fontWeight: "500",
    display: "block",
  },
  input: {
    padding: "10px",
    fontSize: "14px",
    border: "1px solid #ddd",
    borderRadius: "6px",
    width: "100%",
    backgroundColor: "#f9f9f9",
  },
  select: {
    padding: "10px",
    fontSize: "14px",
    border: "1px solid #ddd",
    borderRadius: "6px",
    width: "100%",
    backgroundColor: "#f9f9f9",
  },
  fileInput: {
    fontSize: "14px",
    color: "#666666",
  },
  submitButton: {
    padding: "12px 20px",
    fontSize: "16px",
    color: "#ffffff",
    backgroundColor: "#007BFF",
    border: "none",
    borderRadius: "6px",
    cursor: "pointer",
    fontWeight: "bold",
    textTransform: "uppercase",
    transition: "background-color 0.3s ease",
  },
  submitButtonHover: {
    backgroundColor: "#0056b3",
  },
};

export default NomineePage;


================================================
File: src/components/NormalPatient.js
================================================
    import React, { useState, useRef, useEffect } from 'react';
    import axios from 'axios';
    import { Link, useNavigate } from 'react-router-dom';
    import { FiLogOut } from 'react-icons/fi';
    import { FaArrowUp } from 'react-icons/fa';
    import logo from '../images/logo.png';
    import io from 'socket.io-client';

    const socket = io('http://localhost:5001');

    const NormalPatient = () => {

        const [appointments, setAppointments] = useState([]);
        const [newAppointment, setNewAppointment] = useState({ name: '', time: '' });
        const [postponedAppointments, setPostponedAppointments] = useState([]);
        const [completedAppointments, setCompletedAppointments] = useState([]);

        useEffect(() => {
            axios.get('http://localhost:5001/api/appointments')
                .then(response => setAppointments(response.data))
                .catch(error => console.error('Error fetching appointments:', error));
        }, []);



        // Polling and socket event updates
    useEffect(() => {
        const fetchAppointments = async () => {
            try {
                const response = await axios.get('http://localhost:5001/api/appointments');
                setAppointments(response.data);
            } catch (error) {
                console.error('Error fetching appointments:', error);
            }
        };

        fetchAppointments(); // Initial fetch
        const intervalId = setInterval(fetchAppointments, 5000); // Polling every 5 seconds

        socket.on('connect', () => console.log('Connected to Socket.io server'));

        socket.on('updateAppointment', ({ action, data, id }) => {
            setAppointments((prevAppointments) => {
                switch (action) {
                    case 'add':
                        return [...prevAppointments, data];
                    case 'delete':
                        return prevAppointments.filter(app => app.id !== id);
                    case 'postpone':
                    case 'complete':
                        return prevAppointments.map(app => (app.id === data.id ? data : app));
                    default:
                        return prevAppointments;
                }
            });
        });

        return () => {
            clearInterval(intervalId);
            socket.off('updateAppointment');
        };
    }, []);


    const [medicalRecords, setMedicalRecords] = useState([]);
    const [newMedicalRecord, setNewMedicalRecord] = useState({ date: '', name: '', result: '' });

    useEffect(() => {
        const fetchMedicalRecords = async () => {
            try {
                const response = await axios.get('http://localhost:5001/api/medical-records');
                setMedicalRecords(response.data);
            } catch (error) {
                console.error('Error fetching medical records:', error);
            }
        };

        fetchMedicalRecords();
    }, []);

    const handleAddMedicalRecord = async () => {
        try {
            const response = await axios.post('http://localhost:5001/api/medical-records', newMedicalRecord);
            setMedicalRecords([...medicalRecords, response.data]);
            setNewMedicalRecord({ date: '', name: '', result: '' });
        } catch (error) {
            console.error('Error adding medical record:', error);
        }
    };

    const handleDeleteMedicalRecord = async (id) => {
        try {
            await axios.delete(`http://localhost:5001/api/medical-records/${id}`);
            setMedicalRecords(medicalRecords.filter(record => record.id !== id));
        } catch (error) {
            console.error('Error deleting medical record:', error);
        }
    };

    const handleMedicalRecordInputChange = (e) => {
        const { name, value } = e.target;
        setNewMedicalRecord({ ...newMedicalRecord, [name]: value });
    };



    const [medicalBills, setMedicalBills] = useState([]);
    const [newMedicalBill, setNewMedicalBill] = useState({ date: '', name: '', amount: '' });

    const handleAddMedicalBill = async () => {
        console.log(newMedicalBill);
        try {
            const response = await axios.post('http://localhost:5001/api/medical-bills', newMedicalBill);
            setMedicalBills([...medicalBills, response.data]);
            setNewMedicalBill({ date: '', name: '', amount: '' });
        } catch (error) {
            console.error('Error adding medical bill:', error);
        }
    };

    useEffect(() => {
        const fetchMedicalBills = async () => {
            try {
                const response = await axios.get('http://localhost:5001/api/medical-bills');
                setMedicalBills(response.data);
            } catch (error) {
                console.error('Error fetching medical bills:', error);
            }
        };
        fetchMedicalBills();
    }, []);

    useEffect(() => {
        const fetchMedications = async () => {
            try {
                const response = await axios.get('http://localhost:5001/api/medications');
                setMedications(response.data);
            } catch (error) {
                console.error('Error fetching medications:', error);
            }
        };
        fetchMedications();
    }, []);

    useEffect(() => {
        const fetchReports = async () => {
            try {
                const response = await axios.get('http://localhost:5001/api/reports');
                setReports(response.data);
            } catch (error) {
                console.error('Error fetching Reports:', error);
            }
        };
        fetchReports();
    }, []);

    const handleDeleteMedicalBill = async (id) => {
        try {
            await axios.delete(`http://localhost:5001/api/medical-bills/${id}`);
            setMedicalBills(medicalBills.filter((bill) => bill.id !== id));
        } catch (error) {
            console.error('Error deleting medical bill:', error);
        }
    };

    const [medications, setMedications] = useState([]);
    const [newMedication, setNewMedication] = useState({ name: '', dosage: '', frequency: '', condition: '' });


    const [reports, setReports] = useState([]);
    const [file, setFile] = useState(null);
    const [reportName, setReportName] = useState('');

    const handleScroll = () => {
        const sections = [
            { ref: appointmentsRef, id: 'Appointment' },
            { ref: medicalrecordsRef, id: 'MedicalRecords' },
            { ref: medicalbillsRef, id: 'MedicalBills' },
            { ref: medicationsRef, id: 'Medications' },
            { ref: reportsRef, id: 'Reports' },
        ];

        const scrollPosition = window.scrollY;

        sections.forEach(({ ref, id }) => {
            if (ref.current) {
                const sectionTop = ref.current.getBoundingClientRect().top + window.scrollY;
                const sectionBottom = sectionTop + ref.current.clientHeight;

                if (scrollPosition >= sectionTop && scrollPosition < sectionBottom) {
                    setActiveTab(id);
                }
            }
        });
    };

    const handleUploadReport = async (e) => {
        e.preventDefault();
        if (file && reportName) {
            const formData = new FormData();
            formData.append('file', file);
            formData.append('name', reportName);

            const token = localStorage.getItem('token'); // Retrieve the token

            try {
                const response = await axios.post('http://localhost:5001/api/reports', formData, {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                        'Authorization': `Bearer ${token}`, // Include the token
                    },
                });
                setReports((prev) => [...prev, response.data]);
                setReportName('');
                setFile(null);
            } catch (error) {
                console.error('Error uploading report:', error);
                alert('Error uploading report: ' + error.response?.data?.error || error.message);
            }
        } else {
            alert("Please select a file and provide a report name.");
        }
    };


    const handleDeleteReport = async (id) => {

        const token = localStorage.getItem('token'); // Retrieve the token

        try {
            await axios.delete(`http://localhost:5001/api/reports/${id}`, {
                headers: {
                    Authorization: `Bearer ${token}`, // Make sure to include the token if needed
                },
            });
            // Update the state to remove the deleted report
            const updatedReports = reports.filter(report => report.id !== id);
            setReports(updatedReports);
        } catch (error) {
            console.error('Error deleting report:', error);
        }
    };
    


    const handleAddMedication = async () => {
        try {
            const response = await axios.post('http://localhost:5001/api/medications', newMedication);
            setMedications([...medications, response.data]);
            setNewMedication({ name: '', dosage: '', frequency: '', condition: '' });
        } catch (error) {
            console.error('Error adding medication:', error.response ? error.response.data : error.message);
        }
    };

    const handleDeleteMedication = async (id) => {
        try {
            console.log('Attempting to delete medication with ID:', id);
            const response = await axios.delete(`http://localhost:5001/api/medications/${id}`);
            console.log('Delete response status:', response.status);
            
            // Update the medications state after successful deletion
            setMedications(prevMedications => prevMedications.filter(medication => medication.id !== id));
        } catch (error) {
            // Log error details
            console.error('Error deleting medication:', error.response ? error.response.data : error.message);
            console.error('Full error object:', error);
        }
    };
    
    

    const handleMedicationInputChange = (e) => {
        const { name, value } = e.target;
        setNewMedication({ ...newMedication, [name]: value });
    };

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setNewAppointment({ ...newAppointment, [name]: value });
    };

    const handleMedicalBillInputChange = (e) => {
        const { name, value } = e.target;
        setNewMedicalBill({ ...newMedicalBill, [name]: value });
    };

    useEffect(() => {
        window.addEventListener('scroll', handleScroll);
        return () => {
            window.removeEventListener('scroll', handleScroll);
        };
    }, []);

     const handleAddAppointment = async () => {
        try {
            const response = await axios.post('http://localhost:5001/api/appointments', newAppointment);
            setAppointments([...appointments, response.data]);
            setNewAppointment({ name: '', time: '' });
            socket.emit('updateAppointment', { action: 'add', data: response.data });
        } catch (err) {
            console.error('Error adding appointment:', err);
        }
    };

    const handlePostponeAppointment = async (id) => {
        try {
            const response = await axios.patch(`http://localhost:5001/api/appointments/postpone/${id}`);
            setAppointments(appointments.filter(app => app.id !== id));
            setPostponedAppointments([...postponedAppointments, response.data]);
            // Emit socket event to notify other dashboard
            socket.emit('updateAppointment', { action: 'postpone', data: response.data, id });
        } catch (err) {
            console.error('Error postponing appointment:', err);
        }
    };

    const handleCompleteAppointment = async (id) => {
        try {
            const response = await axios.patch(`http://localhost:5001/api/appointments/complete/${id}`);
            setAppointments(appointments.filter(app => app.id !== id));
            setCompletedAppointments([...completedAppointments, response.data]);
            // Emit socket event to notify other dashboard
            socket.emit('updateAppointment', { action: 'complete', data: response.data, id });
        } catch (err) {
            console.error('Error completing appointment:', err);
        }
    };

    const handleDeleteCompletedAppointment = async (id) => {
        try {
            await axios.delete(`http://localhost:5001/api/appointments/${id}`);
            setCompletedAppointments(completedAppointments.filter(app => app.id !== id));
            // Emit socket event to notify other dashboard
            socket.emit('updateAppointment', { action: 'delete', id });
        } catch (err) {
            console.error('Error deleting appointment:', err);
        }
    };

    const handleMoveUpPostponedAppointment = (id) => {
        const appointment = postponedAppointments.find((app) => app.id === id);
        setPostponedAppointments(postponedAppointments.filter((app) => app.id !== id));
        setAppointments([...appointments, { ...appointment, status: 'Pending' }]);
        // Emit socket event to notify other dashboard
        socket.emit('updateAppointment', { action: 'add', data: { ...appointment, status: 'Pending' } });
    };

    
    const navigate = useNavigate();
    const [activeTab, setActiveTab] = useState('Appointments');

    const appointmentsRef = useRef(null);
    const medicalrecordsRef = useRef(null);
    const medicalbillsRef = useRef(null);
    const medicationsRef = useRef(null);
    const reportsRef = useRef(null);

    const handleLogout = () => {
        navigate("/login");
    };

    const handleScrollToSection = (section) => {
        setActiveTab(section);

        switch (section) {
            case 'Appointments':
                appointmentsRef.current.scrollIntoView({ behavior: 'smooth' });
                break;
            case 'MedicalRecords':
                medicalrecordsRef.current.scrollIntoView({ behavior: 'smooth' });
                break;
            case 'MedicalBills':
                medicalbillsRef.current.scrollIntoView({ behavior: 'smooth' });
                break;
            case 'Medications':
                medicationsRef.current.scrollIntoView({ behavior: 'smooth' });
                break;
            case 'Reports':
                reportsRef.current.scrollIntoView({ behavior: 'smooth' });
                break;
            default:
                break;
        }
    };

    return (
        <div style={styles.dashboardContainer}>
            <nav style={styles.sidebar}>
                <div style={styles.logoContainer}>
                    <img src={logo} alt="Logo" style={styles.logo} />
                </div>

                <ul style={styles.navList}>
                    <li>
                        <span
                            onClick={() => handleScrollToSection('Appointment')}
                            style={{
                                ...styles.navItem,
                                ...(activeTab === 'Appointment' ? styles.activeNavItem : {}),
                            }}
                        >
                            Appointments
                        </span>
                    </li>
                    <li>
                        <span
                            onClick={() => handleScrollToSection('MedicalRecords')}
                            style={{
                                ...styles.navItem,
                                ...(activeTab === 'MedicalRecords' ? styles.activeNavItem : {}),
                            }}
                        >
                            Medical Records
                        </span>
                    </li>
                    <li>
                        <span
                            onClick={() => handleScrollToSection('MedicalBills')}
                            style={{
                                ...styles.navItem,
                                ...(activeTab === 'MedicalBills' ? styles.activeNavItem : {}),
                            }}
                        >
                            Medical Bills
                        </span>
                    </li>
                    <li>
                        <span
                            onClick={() => handleScrollToSection('Medications')}
                            style={{
                                ...styles.navItem,
                                ...(activeTab === 'Medications' ? styles.activeNavItem : {}),
                            }}
                        >
                            Medications
                        </span>
                    </li>
                    <li>
                        <span
                            onClick={() => handleScrollToSection('Reports')}
                            style={{
                                ...styles.navItem,
                                ...(activeTab === 'Reports' ? styles.activeNavItem : {}),
                            }}
                        >
                            Reports
                        </span>
                    </li>
                </ul>

                <div style={styles.bottomNav}>
                    <ul style={styles.navList}>
                        <li>
                            <Link to="/normalpatient" style={styles.navItem}>Profile</Link>
                        </li>
                        <li>
                            <Link to="/nominee" style={styles.navItem}>Add a Nominee</Link>
                        </li>
                        <li style={styles.navItem} onClick={handleLogout}><FiLogOut /> Log Out</li>
                    </ul>
                </div>
            </nav>

            <main style={styles.mainContent}>
                <section style={styles.schedulerSection} ref={appointmentsRef}>
                    <h2>Nominee: N/A</h2>
                    <h2>Family Physician: Dr. Meenia</h2>
                    <h2>Scheduler</h2>
                    <div>
                        <h3>Add New Appointment</h3>
                        <input
                            type="text"
                            name="name"
                            placeholder="Patient Name"
                            value={newAppointment.name}
                            onChange={handleInputChange}
                            style={styles.input}
                        />
                        <input
                            type="text"
                            name="time"
                            placeholder="Appointment Time"
                            value={newAppointment.time}
                            onChange={handleInputChange}
                            style={styles.input}
                        />
                        <button onClick={handleAddAppointment} style={styles.button}>Add Appointment</button>
                    </div>

                    <div>
                        <h3>Upcoming Appointments</h3>
                        <ul>
                            {appointments.map((appointment) => (
                                <li key={appointment.id} style={styles.appointmentItem}>
                                    {appointment.name} - {appointment.time} - {appointment.status}
                                    <button onClick={() => handleCompleteAppointment(appointment.id)} style={styles.button}>
                                        Done with Appointment
                                    </button>
                                    <button onClick={() => handlePostponeAppointment(appointment.id)} style={styles.button}>
                                        Postpone
                                    </button>
                                </li>
                            ))}
                        </ul>
                    </div>
                    <div>
                        <h3>Completed Appointments</h3>
                        <ul>
                            {completedAppointments.map((appointment) => (
                                <li key={appointment.id} style={styles.appointmentItem}>
                                    {appointment.name} - {appointment.time} - {appointment.status}
                                    <button onClick={() => handleDeleteCompletedAppointment(appointment.id)} style={styles.button}>
                                        Delete
                                    </button>
                                </li>
                            ))}
                        </ul>
                    </div>

                    <div>
                        <h3>Postponed Appointments</h3>
                        <ul>
                            {postponedAppointments.map((appointment) => (
                                <li key={appointment.id} style={styles.appointmentItem}>
                                    {appointment.name} - {appointment.time} - {appointment.status}
                                    <button onClick={() => handleMoveUpPostponedAppointment(appointment.id)} style={styles.button}>
                                        <FaArrowUp />
                                    </button>
                                </li>
                            ))}
                        </ul>
                    </div>
                </section>
                <section style={styles.schedulerSection} ref={medicalrecordsRef}>
                    <h3>Add New Medical Record</h3>
                    <div className="input-group">
                        <input
                            type="date"
                            name="date"
                            value={newMedicalRecord.date}
                            onChange={handleMedicalRecordInputChange}
                            style={styles.input}
                        />
                        <input
                            type="text"
                            name="name"
                            placeholder="Record Name"
                            value={newMedicalRecord.name}
                            onChange={handleMedicalRecordInputChange}
                            style={styles.input}
                        />
                        <input
                            type="text"
                            name="result"
                            placeholder="Result"
                            value={newMedicalRecord.result}
                            onChange={handleMedicalRecordInputChange}
                            style={styles.input}
                        />
                        <button onClick={handleAddMedicalRecord} style={styles.button}>Add Record</button>
                    </div>

                    <h3>Records List</h3>
                    <ul className="medical-record-list">
                        {medicalRecords.map(record => (
                            <li key={record.id} className="medical-record-item">
                                <span>{record.date} - {record.name}: {record.result}</span>
                                <button onClick={() => handleDeleteMedicalRecord(record.id)} style={styles.button}>Delete</button>
                            </li>
                        ))}
                    </ul>
                </section>
                <section style={styles.schedulerSection} ref={medicalbillsRef}>
                    <h2>Medical Bills</h2>
                    <div>
                        <input type="date" name="date" value={newMedicalBill.date} onChange={handleMedicalBillInputChange} style={styles.input} placeholder="Date" />
                        <input type="text" name="name" value={newMedicalBill.name} onChange={handleMedicalBillInputChange} style={styles.input} placeholder="Name" />
                        <input type="text" name="amount" value={newMedicalBill.amount} onChange={handleMedicalBillInputChange} style={styles.input} placeholder="Amount" />
                        <button onClick={handleAddMedicalBill} style={styles.button}>Add Bill</button>
                    </div>
                    <ul className="medical-bill-list">
                        {medicalBills.map(bill => (
                            <li key={bill.id} style={styles.appointmentItem}>
                                {bill.date} - {bill.name} - ₹{bill.amount}
                                <button onClick={() => handleDeleteMedicalBill(bill.id)} style={styles.button}>Delete</button>
                            </li>
                        ))}
                    </ul>
                </section>

                <section style={styles.schedulerSection} ref={medicationsRef}>
                    <h2>Medications</h2>
                    <div>
                        <input type="text" name="name" value={newMedication.name} onChange={handleMedicationInputChange} style={styles.input} placeholder="Medicine Name" />
                        <input type="text" name="dosage" value={newMedication.dosage} onChange={handleMedicationInputChange} style={styles.input} placeholder="Dosage" />
                        <input type="text" name="frequency" value={newMedication.frequency} onChange={handleMedicationInputChange} style={styles.input} placeholder="Frequency" />
                        <input type="text" name="condition" value={newMedication.condition} onChange={handleMedicationInputChange} style={styles.input} placeholder="Condition" />
                        <button onClick={handleAddMedication} style={styles.button}>Add Medication</button>
                    </div>
                    <ul className="medication-list">
                        {medications.map(medication => (
                            <li key={medication.id} style={styles.appointmentItem}>
                                {medication.name} - {medication.dosage} - {medication.frequency} - For {medication.condition}
                                <button onClick={() => handleDeleteMedication(medication.id)} style={styles.button}>Delete</button>
                            </li>
                        ))}
                    </ul>
                </section>

                <section ref={reportsRef} style={styles.schedulerSection}>
                    <h2>Reports</h2>
                    <div style={styles.uploadSection}>
                        <h3>Upload New Report</h3>
                        <form onSubmit={handleUploadReport}>
                            <input
                                type="text"
                                placeholder="Report Name"
                                value={reportName}
                                onChange={(e) => setReportName(e.target.value)}
                                style={styles.input}
                                required
                            />
                            <input
                                type="file"
                                onChange={(e) => setFile(e.target.files[0])}
                                style={styles.fileInput}
                                required
                            />
                            <button type="submit" style={styles.button}>Upload Report</button>
                        </form>
                    </div>
                    <div style={styles.reportList}>
                        <h3>Uploaded Reports</h3>
                        {reports.length > 0 ? (
                            <ul>
                                {reports.map((report) => (
                                    <li key={report.id} style={styles.reportItem}>
                                        <span>{report.name}</span>
                                        <div style={styles.reportActions}>
                                            <a
                                                href={`http://localhost:5001/${report.filePath}`} // Adjust this to point correctly
                                                target="_blank"
                                                rel="noopener noreferrer"
                                                style={styles.downloadLink}
                                            >
                                                View
                                            </a>

                                            <button onClick={() => handleDeleteReport(report.id)} style={styles.deleteButton}>
                                                Delete
                                            </button>
                                        </div>
                                    </li>
                                ))}
                            </ul>
                        ) : (
                            <p>No reports uploaded yet.</p>
                        )}
                    </div>
                </section>
            </main>
        </div>
    );
};

const styles = {
     // Main container for the dashboard layout with flex row direction for desktop view
    dashboardContainer: {
        display: 'flex',
        height: '100vh',
        fontFamily: "'Poppins', sans-serif",
        backgroundColor: '#f0f4f7',
        flexDirection: 'row',
    },
    // Sidebar styling: fixed width, green background, and spaced items for navigation
    sidebar: {
        width: '250px',
        backgroundColor: '#097969',
        padding: '20px',
        color: '#fff',
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'space-between',
        boxShadow: '2px 0 5px rgba(0, 0, 0, 0.1)',
    },
    // Styling for logo container within the sidebar
    logoContainer: {
        textAlign: 'right',
        marginBottom: '20px',
    },
    logo: {
        width: '120px',
        marginBottom: '20px',
        marginRight: '70px',
    },
    // Main navigation list styling within sidebar
    navList: {
        listStyleType: 'none',
        padding: 0,
    },
    navItem: {
        display: 'flex',
        alignItems: 'center',
        color: '#fff',
        padding: '10px',
        textDecoration: 'none',
        borderBottom: '2px solid transparent',
        transition: 'border-bottom 0.3s',
        cursor: 'pointer',
    },
    activeNavItem: {
        borderBottom: '9px solid black',
    },
    navItemHovered: {
        borderBottom: '9px solid #fff',
    },
    navItemIcon: {
        marginRight: '10px',
    },
    chartsSection: {
        display: 'flex',
        justifyContent: 'center',
        padding: '20px',
        width: '100%',
    },
    chartContainer: {
        width: '80%',
        padding: '20px',
        borderRadius: '8px',
        backgroundColor: '#f9f9f9',
        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
    },
    // Main content area where different sections are displayed
    mainContent: {
        flex: 1,
        padding: '20px',
        backgroundColor: '#fff',
        overflowY: 'scroll',
    },
    header: {
        display: 'flex',
        justifyContent: 'space-between',
        marginBottom: '20px',
    },
    metricsContainer: {
        display: 'flex',
        justifyContent: 'space-around',
        width: '100%',
        flexWrap: 'wrap', // Allow wrapping for smaller screens
    },
    metricCard: {
        backgroundColor: '#f0f0f0',
        padding: '40px',
        borderRadius: '8px',
        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
        width: '22%',
        textAlign: 'center',
        fontWeight: 'bold',
        margin: '10px', // Add margin for better spacing on wrap
    },
    pieChartContainer: {
        width: '30%',
        padding: '20px',
        borderRadius: '8px',
        backgroundColor: '#f9f9f9',
        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
    },
    bottomNav: {
        paddingTop: '20px',
        borderTop: '1px solid #fff',
    },
    // Individual section styling for content blocks like appointments, medical records, etc.
    schedulerSection: {
        padding: '20px',
        backgroundColor: '#f9f9f9',
        borderRadius: '8px',
        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
        marginBottom: '20px',
    },
    formContainer: {
        display: 'flex',
        justifyContent: 'space-between',
        marginBottom: '20px',
        flexWrap: 'wrap', // Allow form fields to wrap on smaller screens
    },
    inputFocus: {
        borderColor: '#0d47a1',
    },
    buttonHover: {
        backgroundColor: '#063373',
    },
    appointmentList: {
        marginBottom: '20px',
    },
    appointmentCard: {
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: '10px',
        backgroundColor: '#fff',
        borderRadius: '5px',
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
        marginBottom: '10px',
        animation: 'fadeIn 0.5s ease-in-out',
    },
    postponeButton: {
        backgroundColor: '#ff9800',
        color: '#fff',
        border: 'none',
        borderRadius: '5px',
        padding: '5px 10px',
        cursor: 'pointer',
    },
    postponedStatus: {
        color: '#ff5722',
        fontWeight: 'bold',
    },
    appointmentItem: {
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        backgroundColor: '#f9f9f9',
        padding: '10px',
        marginBottom: '10px',
        borderRadius: '8px',
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
    },
    // Button styling for actions such as adding or deleting records
    button: {
        backgroundColor: '#0d47a1',
        color: '#fff',
        border: 'none',
        borderRadius: '4px',
        padding: '8px 12px',
        cursor: 'pointer',
        marginLeft: '10px',
    },
    // General input field styling with padding and border radius
    input: {
        marginRight: '10px',
        padding: '8px',
        borderRadius: '4px',
        border: '1px solid #ccc',
    },
    // Styling for upload section within the reports section
    uploadSection: {
        marginBottom: '20px',
        padding: '15px',
        backgroundColor: '#f8f9fa',
        borderRadius: '5px',
    },
    fileInput: {
        margin: '5px 0',
    },
    reportList: {
        marginTop: '15px',
    },
    reportItem: {
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: '10px',
        borderBottom: '1px solid #ccc',
    },
    downloadLink: {
        color: '#007bff',
        textDecoration: 'none',
    },
    section: {
        marginTop: '20px',
    },
    deleteButton: {
        padding: '10px 10px',
        backgroundColor: '#dc3545',
        color: '#fff',
        border: 'none',
        borderRadius: '5px',
        cursor: 'pointer',
        marginLeft: '25px',
        //display: 'none' 
    },
    '@keyframes fadeIn': {
        from: { opacity: 0 },
        to: { opacity: 1 },
    },

    // Responsive styling
    '@media (max-width: 1024px)': { // Tablet
        dashboardContainer: {
            flexDirection: 'column',
        },
        sidebar: {
            width: '100%',
            padding: '15px',
            position: 'relative', // Positioned on top for tablet view
        },
        metricsContainer: {
            flexDirection: 'column',
            gap: '15px',
        },
        metricCard: {
            width: '100%',
            padding: '20px',
        },
        chartContainer: {
            width: '90%',
            padding: '15px',
        },
        pieChartContainer: {
            width: '90%',
            padding: '15px',
        },
    },
    '@media (max-width: 768px)': { // Small tablets and large phones
        formContainer: {
            flexDirection: 'column',
            gap: '15px',
        },
        button: {
            width: '100%',
        },
        sidebar: {
            width: '100%',
            padding: '10px',
            boxShadow: 'none', // Simplify for small screens
        },
        chartContainer: {
            width: '100%',
            padding: '10px',
        },
        pieChartContainer: {
            width: '100%',
            padding: '10px',
        },
    },
    '@media (max-width: 480px)': { // Mobile
        sidebar: {
            width: '100%',
            padding: '5px 10px',
        },
        logo: {
            width: '80px',
            margin: '0 auto 10px auto', // Center logo for better fit
        },
        navItem: {
            padding: '8px 5px',
            fontSize: '0.9rem',
        },
        metricCard: {
            width: '100%',
            padding: '15px',
            margin: '10px 0', // Add spacing between cards
        },
        chartContainer: {
            width: '100%',
            padding: '8px',
        },
        formContainer: {
            flexDirection: 'column',
            gap: '10px',
        },
        appointmentCard: {
            padding: '8px',
            fontSize: '0.9rem',
        },
        deleteButton: {
            width: '100%', // Full width for accessibility
            textAlign: 'center',
            margin: '10px 0', 
        },
        
    },
};  




export default NormalPatient;

================================================
File: src/components/NurseDashboard.js
================================================
import React, { useState } from 'react';
import { Line } from 'react-chartjs-2';
import 'chart.js/auto'; // Import chart.js automatically for chart rendering

const NurseDashboard = () => {
    // Dummy data for vitals and prescriptions
    const vitals = {
        heartRate: [72, 75, 78, 74, 80, 77],
        bloodPressure: [120, 122, 125, 118, 121, 119],
        timestamps: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
    };

    const prescriptions = [
        { name: 'Aspirin', dosage: '75mg', frequency: 'Once a day' },
        { name: 'Metformin', dosage: '500mg', frequency: 'Twice a day' },
        { name: 'Lisinopril', dosage: '10mg', frequency: 'Once a day' },
    ];

    return (
        <div style={styles.nurseDashboard}>
            <h2 style={styles.heading}>Nurse Dashboard</h2>

            {/* Patient Vitals */}
            <div style={styles.section}>
                <h3 style={styles.sectionTitle}>Patient Vitals</h3>
                <div style={styles.chartContainer}>
                    <h4 style={styles.chartTitle}>Heart Rate</h4>
                    <Line
                        data={{
                            labels: vitals.timestamps,
                            datasets: [
                                {
                                    label: 'Heart Rate (bpm)',
                                    data: vitals.heartRate,
                                    fill: false,
                                    borderColor: 'rgba(75,192,192,1)',
                                    tension: 0.1,
                                },
                            ],
                        }}
                        options={{
                            scales: {
                                y: {
                                    beginAtZero: false,
                                },
                            },
                        }}
                    />
                </div>

                <div style={styles.chartContainer}>
                    <h4 style={styles.chartTitle}>Blood Pressure</h4>
                    <Line
                        data={{
                            labels: vitals.timestamps,
                            datasets: [
                                {
                                    label: 'Blood Pressure (mmHg)',
                                    data: vitals.bloodPressure,
                                    fill: false,
                                    borderColor: 'rgba(255,99,132,1)',
                                    tension: 0.1,
                                },
                            ],
                        }}
                        options={{
                            scales: {
                                y: {
                                    beginAtZero: false,
                                },
                            },
                        }}
                    />
                </div>
            </div>

            {/* Prescriptions */}
            <div style={styles.section}>
                <h3 style={styles.sectionTitle}>Patient Prescriptions</h3>
                <ul style={styles.prescriptionList}>
                    {prescriptions.map((prescription, index) => (
                        <li key={index} style={styles.prescriptionItem}>
                            <strong>{prescription.name}</strong> - {prescription.dosage} ({prescription.frequency})
                        </li>
                    ))}
                </ul>
            </div>
        </div>
    );
};

const styles = {
    nurseDashboard: {
        padding: '20px',
        maxWidth: '900px',
        margin: '0 auto',
        backgroundColor: '#f9f9f9',
        borderRadius: '8px',
        boxShadow: '0px 4px 8px rgba(0,0,0,0.1)',
    },
    heading: {
        fontSize: '2em',
        textAlign: 'center',
        marginBottom: '20px',
        color: '#333',
    },
    section: {
        marginBottom: '40px',
        padding: '10px',
        backgroundColor: '#fff',
        borderRadius: '8px',
        boxShadow: '0px 2px 4px rgba(0,0,0,0.1)',
    },
    sectionTitle: {
        fontSize: '1.5em',
        marginBottom: '20px',
        color: '#555',
    },
    chartContainer: {
        marginBottom: '30px',
    },
    chartTitle: {
        fontSize: '1.2em',
        marginBottom: '10px',
        color: '#666',
    },
    prescriptionList: {
        listStyleType: 'none',
        padding: 0,
    },
    prescriptionItem: {
        padding: '10px',
        borderBottom: '1px solid #ccc',
        color: '#555',
    },
};

export default NurseDashboard;


================================================
File: src/components/PharmacyDashboard.js
================================================
import React, { useState, useEffect } from 'react';
import productData from './product.json'; // Assuming you have a product.json file

const PharmacyDashboard = () => {
    const [prescriptions, setPrescriptions] = useState([
        { name: 'Amoxicillin', dosage: '500mg', frequency: 'Twice a day' },
        { name: 'Ibuprofen', dosage: '200mg', frequency: 'Once every 8 hours' },
        { name: 'Lisinopril', dosage: '10mg', frequency: 'Once a day' },
    ]);

    const [searchQuery, setSearchQuery] = useState('');
    const [searchResults, setSearchResults] = useState([]);
    const [alternativeMedicine, setAlternativeMedicine] = useState('');

    // Simulated barcode scan result
    const [scannedPrescription, setScannedPrescription] = useState('');

    // Handle search for medicines
    const handleSearch = (query) => {
        const filteredProducts = productData.filter((product) =>
            product.name.toLowerCase().includes(query.toLowerCase())
        );
        setSearchResults(filteredProducts);
    };

    // Simulate barcode scanning
    const handleScanPrescription = () => {
        // Simulate a scanned prescription result
        setScannedPrescription('Prescription Scanned: Amoxicillin 500mg');
    };

    useEffect(() => {
        if (searchQuery) {
            handleSearch(searchQuery);
        } else {
            setSearchResults([]);
        }
    }, [searchQuery]);

    return (
        <div style={styles.pharmacyDashboard}>
            <h2 style={styles.heading}>Pharmacy Dashboard</h2>

            {/* Scanned Prescription */}
            <div style={styles.section}>
                <h3 style={styles.sectionTitle}>Scanned Prescription</h3>
                <button onClick={handleScanPrescription} style={styles.scanButton}>
                    Scan Prescription (Simulate)
                </button>
                {scannedPrescription && <p style={styles.scannedText}>{scannedPrescription}</p>}
            </div>

            {/* Prescriptions List */}
            <div style={styles.section}>
                <h3 style={styles.sectionTitle}>Patient Prescriptions</h3>
                <ul style={styles.prescriptionList}>
                    {prescriptions.map((prescription, index) => (
                        <li key={index} style={styles.prescriptionItem}>
                            <strong>{prescription.name}</strong> - {prescription.dosage} ({prescription.frequency})
                        </li>
                    ))}
                </ul>
            </div>

            {/* Alternative Medicine Input */}
            <div style={styles.section}>
                <h3 style={styles.sectionTitle}>Suggest Alternative Medicines</h3>
                <input
                    type="text"
                    placeholder="Suggest an alternative medicine"
                    value={alternativeMedicine}
                    onChange={(e) => setAlternativeMedicine(e.target.value)}
                    style={styles.inputBox}
                />
                <p style={styles.alternativeText}>
                    {alternativeMedicine && `Suggested Alternative: ${alternativeMedicine}`}
                </p>
            </div>

            {/* Medicine Search */}
            <div style={styles.section}>
                <h3 style={styles.sectionTitle}>Search for Medicines</h3>
                <input
                    type="text"
                    placeholder="Search medicines"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    style={styles.inputBox}
                />
                {searchResults.length > 0 && (
                    <ul style={styles.searchResults}>
                        {searchResults.map((result, index) => (
                            <li key={index} style={styles.searchResultItem}>
                                <img src={result.image} alt={result.name} style={styles.productImage} />
                                <div style={styles.productDetails}>
                                    <span>{result.name}</span>
                                    <span>{result.price} $</span>
                                </div>
                            </li>
                        ))}
                    </ul>
                )}
            </div>
        </div>
    );
};

const styles = {
    pharmacyDashboard: {
        padding: '20px',
        maxWidth: '900px',
        margin: '0 auto',
        backgroundColor: '#f9f9f9',
        borderRadius: '8px',
        boxShadow: '0px 4px 8px rgba(0,0,0,0.1)',
    },
    heading: {
        fontSize: '2em',
        textAlign: 'center',
        marginBottom: '20px',
        color: '#333',
    },
    section: {
        marginBottom: '40px',
        padding: '20px',
        backgroundColor: '#fff',
        borderRadius: '8px',
        boxShadow: '0px 2px 4px rgba(0,0,0,0.1)',
    },
    sectionTitle: {
        fontSize: '1.5em',
        marginBottom: '15px',
        color: '#555',
    },
    prescriptionList: {
        listStyleType: 'none',
        padding: 0,
    },
    prescriptionItem: {
        padding: '10px',
        borderBottom: '1px solid #ccc',
        color: '#555',
    },
    inputBox: {
        width: '100%',
        padding: '10px',
        fontSize: '1em',
        borderRadius: '4px',
        border: '1px solid #ccc',
        marginBottom: '10px',
    },
    alternativeText: {
        color: '#777',
        marginTop: '10px',
    },
    scanButton: {
        padding: '10px 15px',
        backgroundColor: '#28a745',
        color: '#fff',
        border: 'none',
        borderRadius: '4px',
        cursor: 'pointer',
    },
    scannedText: {
        marginTop: '10px',
        fontSize: '1em',
        color: '#333',
    },
    searchResults: {
        listStyleType: 'none',
        padding: 0,
        marginTop: '10px',
    },
    searchResultItem: {
        display: 'flex',
        alignItems: 'center',
        padding: '10px',
        borderBottom: '1px solid #ccc',
        color: '#555',
    },
    productImage: {
        width: '50px',
        height: '50px',
        marginRight: '10px',
    },
    productDetails: {
        display: 'flex',
        flexDirection: 'column',
    },
};

export default PharmacyDashboard;


================================================
File: src/components/ProtectedRoute.js
================================================
// ProtectedRoute.js
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../components/AuthContext';

const ProtectedRoute = ({ children }) => {
  const { isAuthenticated } = useAuth();

  return isAuthenticated ? children : <Navigate to="/login" />;
};

export default ProtectedRoute;


================================================
File: src/components/product.json
================================================
[
    {
      "name": "Aspirin",
      "price": 5.99,
      "image": "https://via.placeholder.com/150?text=Aspirin"
    },
    {
      "name": "Ibuprofen",
      "price": 8.49,
      "image": "https://via.placeholder.com/150?text=Ibuprofen"
    },
    {
      "name": "Paracetamol",
      "price": 3.99,
      "image": "https://via.placeholder.com/150?text=Paracetamol"
    },
    {
      "name": "Amoxicillin",
      "price": 12.99,
      "image": "https://via.placeholder.com/150?text=Amoxicillin"
    },
    {
      "name": "Lisinopril",
      "price": 14.99,
      "image": "https://via.placeholder.com/150?text=Lisinopril"
    }
  ]
  

================================================
File: src/pages/HomePage.js
================================================
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { useTranslation } from 'react-i18next';

const HomePage = () => {
    const { t, i18n } = useTranslation();
    const [dropdownVisible, setDropdownVisible] = useState(false);

    const changeLanguage = (lng) => {
        i18n.changeLanguage(lng);
        setDropdownVisible(false);
    };

    const toggleDropdown = () => {
        setDropdownVisible(!dropdownVisible);
    };

    const styles = {
        container: {
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            height: '100vh',
            backgroundColor: '#fffaf0',
            fontFamily: 'Arial, sans-serif',
            position: 'relative',
            overflow: 'hidden',
            padding: '10px 20px',
        },
        title: {
            fontSize: '3rem',
            color: '#333',
            marginBottom: '20px',
            position: 'relative',
            zIndex: 2,
            animation: 'float 5s infinite', // Adding the floating animation directly
        },
        button: {
            padding: '10px 20px',
            fontSize: '1rem',
            color: '#fff',
            backgroundColor: '#007bff',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
            margin: '10px',
            textDecoration: 'none',
            zIndex: 2,
        },
        linkContainer: {
            display: 'flex',
            justifyContent: 'center',
            flexWrap: 'wrap',
            gap: '10px',
            zIndex: 2,
        },
        languageButton: {
            position: 'absolute',
            top: '40px',
            right: '20px',
            padding: '10px 20px',
            fontSize: '1rem',
            color: '#fff',
            backgroundColor: '#007bff',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
            zIndex: 2,
        },
        dropdown: {
            position: 'absolute',
            top: '60px',
            right: '20px',
            backgroundColor: '#fff',
            border: '1px solid #ccc',
            borderRadius: '5px',
            boxShadow: '0 0 10px rgba(0, 0, 0, 0.1)',
            display: dropdownVisible ? 'block' : 'none',
            zIndex: 2,
        },
        dropdownItem: {
            padding: '10px 20px',
            cursor: 'pointer',
        },
        '@media (max-width: 1024px)': {
            title: { fontSize: '2.5rem' },
            button: { fontSize: '0.9rem', padding: '8px 16px' },
            container: { padding: '15px' },
        },
        '@media (max-width: 600px)': {
            title: { fontSize: '2rem' },
            button: { fontSize: '0.8rem', padding: '6px 12px' },
            container: { padding: '20px', justifyContent: 'space-around' },
            linkContainer: { flexDirection: 'column', gap: '10px' },
        },
    };
    
    

    return (
        <div style={styles.container}>
            <h1 style={styles.title} className="floating-title">{t('Welcome')}</h1>
            <div style={styles.linkContainer}>
                <Link to="/login" style={styles.button}>{t('Login')}</Link>
                <Link to="/register" style={styles.button}>{t('Register')}</Link>
            </div>
            <button style={styles.languageButton} onClick={toggleDropdown}>
                Language
            </button>
            <div style={styles.dropdown}>
                <div style={styles.dropdownItem} onClick={() => changeLanguage('en')}>English</div>
                <div style={styles.dropdownItem} onClick={() => changeLanguage('hi')}>हिन्दी</div>
                <div style={styles.dropdownItem} onClick={() => changeLanguage('mar')}>मराठी</div>


            </div>

            <style>
{`
    /* Floating title animation */
    .floating-title {
        animation: float 5s ease-in-out infinite;
    }

    @keyframes float {
        0% { transform: translateY(0); }
        50% { transform: translateY(-10px); }
        100% { transform: translateY(0); }
    }

    /* Rain animation for medical objects */
    .medical-object {
        position: absolute;
        width: 50px;
        height: 50px;
        top: -100px; /* Start offscreen */
        animation: rain 10s linear infinite;
        opacity: 0.9; /* Slight transparency for a smooth effect */
    }

    @keyframes rain {
        0% { transform: translateY(-100px); opacity: 0; }
        10% { opacity: 1; }
        100% { transform: translateY(110vh); opacity: 0; }
    }

    /* Specific styles for each object to randomize their horizontal positions and speed */
    .health-care { left: 10%; animation-duration: 15s; }
    .hospital { left: 30%; animation-duration: 12s; }
    .immunization { left: 50%; animation-duration: 14s; }
    .medical-care { left: 70%; animation-duration: 13s; }
    .medical-record { left: 90%; animation-duration: 11s; }
    .pill { left: 20%; animation-duration: 16s; }
    .products { left: 60%; animation-duration: 14s; }

    /* Responsive styling */
    @media (max-width: 1024px) {
        .floating-title {
            font-size: 2.5rem;
        }
        .button, .languageButton {
            font-size: 0.9rem;
            padding: 8px 16px;
        }
    }

    /* For mobile devices (600px and below) */
    @media (max-width: 600px) {
        .floating-title {
            font-size: 2rem;
        }
        .button, .languageButton {
            font-size: 0.8rem;
            padding: 6px 12px;
        }
        .container {
            padding: 20px;
            justify-content: space-around;
        }
        .linkContainer {
            flex-direction: column;
            gap: 10px;
        }
    }
`}
</style>



            {/* Images revolving around the center */}
            <img src="/images/health-care.png" alt="Health Care" className="medical-object health-care" />
            <img src="/images/hospital.png" alt="Hospital" className="medical-object hospital" />
            <img src="/images/immunization.png" alt="Immunization" className="medical-object immunization" />
            <img src="/images/medical-care.png" alt="Medical Care" className="medical-object medical-care" />
            <img src="/images/medical-record.png" alt="Medical Record" className="medical-object medical-record" />
            <img src="/images/pill.png" alt="Pill" className="medical-object pill" />
            <img src="/images/products.png" alt="Products" className="medical-object products" />
        </div>
    );
};

export default HomePage;


================================================
File: src/pages/LoginPage.js
================================================
import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import i18n from '../i18n';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { useAuth } from '../components/AuthContext';

const LoginPage = () => {
    const navigate = useNavigate();
    const { login } = useAuth();

    const [aadharNumber, setAadharNumber] = useState('');
    const [password, setPassword] = useState('');
    const [userType, setUserType] = useState('Normal Patient');
    const { t } = useTranslation();
    const [dropdownOpen, setDropdownOpen] = useState(false);
    const [currentSlide, setCurrentSlide] = useState(0);

    const slides = [
        '/images/slide1.png',
        '/images/slide2.png',
        '/images/slide3.png',
    ];

    useEffect(() => {
        const slideInterval = setInterval(() => {
            setCurrentSlide((prevSlide) => (prevSlide + 1) % slides.length);
        }, 3000);

        return () => clearInterval(slideInterval);
    }, [slides.length]);

    const handleSubmit = async (e) => {
        e.preventDefault();
     
        const data = { aadharNumber, password }; // userType is not necessary here unless your API requires it
     
        try {
            const response = await axios.post('http://localhost:5001/api/users/login', data);
     
            if (response.status === 200) {
                const { redirectUrl, token } = response.data;
                console.log(`Redirect URL: ${redirectUrl}`);
                localStorage.setItem('token', token);
                login(); // Mark the user as authenticated
                navigate(redirectUrl);
            } else {
                alert('Login failed. Please check your credentials.');
            }
        } catch (error) {
            console.error('Login failed:', error);
            alert('Login failed. Please check your credentials.');
        }
    };
    
    
    
    const handleLanguageChange = (e) => {
        i18n.changeLanguage(e.target.value);
        setDropdownOpen(false);
    };

    const toggleDropdown = () => {
        setDropdownOpen(!dropdownOpen);
    };

    const styles = {
        container: {
            display: 'flex',
            height: '100vh',
            fontFamily: "'Poppins', sans-serif",
            backgroundColor: '#e0f7fa',
            animation: 'fadeIn 1s ease-in-out',
            flexDirection: 'row', // Initial layout for larger screens
        },
        leftSection: {
            flex: 1,
            position: 'relative',
            overflow: 'hidden',
            height: '100%',
        },
        slideShow: {
            position: 'absolute',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            transition: 'opacity 1s ease-in-out',
        },
        slideImage: {
            width: '90%',
            height: 'auto',
            objectFit: 'cover',
            position: 'absolute',
            top: '20px',
            bottom: '20px',
            left: '50%',
            transform: 'translateX(-50%)',
            borderRadius: '20px',
            boxShadow: '0px 8px 15px rgba(0, 0, 0, 0.1)',
        },
        dotsWrapper: {
            position: 'absolute',
            bottom: '20px',
            display: 'flex',
            justifyContent: 'center',
            width: '100%',
        },
        dot: {
            height: '10px',
            width: '10px',
            borderRadius: '50%',
            backgroundColor: '#fff',
            margin: '0 5px',
            opacity: 0.5,
            transition: 'opacity 0.3s',
        },
        dotActive: {
            opacity: 1,
        },
        formSection: {
            flex: 1,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            padding: '20px',
        },
        form: {
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            backgroundColor: '#ffffff',
            padding: '50px 40px',
            borderRadius: '30px',
            boxShadow: '0 10px 30px rgba(0, 0, 0, 0.1)',
            transition: 'transform 0.3s ease',
            maxWidth: '90%',
        },
        input: {
            margin: '10px 0',
            padding: '12px 15px',
            fontSize: '1rem',
            borderRadius: '5px',
            border: '1px solid #ccc',
            width: '100%',
            transition: 'border-color 0.3s ease',
            outline: 'none',
        },
        select: {
            margin: '10px 0',
            padding: '12px 15px',
            fontSize: '1rem',
            borderRadius: '5px',
            border: '1px solid #ccc',
            width: '100%',
            transition: 'border-color 0.3s ease',
        },
        button: {
            padding: '12px 30px',
            fontSize: '1rem',
            color: '#fff',
            backgroundColor: '#007bff',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
            marginTop: '20px',
            transition: 'background-color 0.3s ease, transform 0.3s ease',
        },
        languageButtonWrapper: {
            position: 'absolute',
            top: '20px',
            right: '20px',
            display: 'inline-block',
        },
        languageButton: {
            padding: '10px 20px',
            fontSize: '1rem',
            color: '#fff',
            backgroundColor: '#007bff',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
            position: 'relative',
            transition: 'background-color 0.3s ease',
        },
        dropdownMenu: {
            display: dropdownOpen ? 'block' : 'none',
            position: 'absolute',
            top: '100%',
            left: '0',
            backgroundColor: '#fff',
            border: '1px solid #007bff',
            borderRadius: '5px',
            minWidth: '100%',
            zIndex: 1,
        },
        dropdownItem: {
            padding: '10px',
            backgroundColor: '#fff',
            color: '#007bff',
            border: 'none',
            width: '100%',
            textAlign: 'left',
            cursor: 'pointer',
            transition: 'background-color 0.3s ease',
        },
        dropdownItemHover: {
            backgroundColor: '#e0f7fa',
        },
        '@media (max-width: 1024px)': { // Tablets
            container: {
                flexDirection: 'column', // Stack sections vertically on tablets
            },
            form: {
                padding: '40px 30px',
                width: '80%', // Adjust width for smaller screens
            },
            slideImage: {
                width: '80%',
                top: '10px', // Reduce space for smaller screens
                borderRadius: '15px',
            },
            button: {
                padding: '10px 25px',
                fontSize: '0.9rem',
            },
        },
        '@media (max-width: 768px)': { // Small tablets and large phones
            container: {
                padding: '10px',
                flexDirection: 'column',
            },
            form: {
                width: '85%', // Further adjust width for smaller screens
                padding: '30px 20px',
            },
            slideImage: {
                width: '70%',
            },
            button: {
                padding: '8px 20px',
                fontSize: '0.85rem',
            },
        },
        '@media (max-width: 480px)': { // Mobile devices
            container: {
                flexDirection: 'column',
                padding: '5px',
            },
            formSection: {
                padding: '10px', // Reduce padding on small screens
            },
            form: {
                width: '95%', // Max width on mobile
                padding: '20px 15px', // Smaller padding for mobile
                borderRadius: '20px',
            },
            slideImage: {
                width: '85%',
                borderRadius: '10px',
            },
            button: {
                padding: '7px 15px',
                fontSize: '0.8rem',
            },
            dotsWrapper: {
                bottom: '10px',
            },
            dot: {
                height: '8px',
                width: '8px',
            },
            languageButton: {
                padding: '8px 15px',
                fontSize: '0.85rem',
            },
        },
    };
    

    return (
        <div style={styles.container}>
            <div style={styles.leftSection}>
                <div style={styles.slideShow}>
                    <img src={slides[currentSlide]} style={styles.slideImage} alt="Slideshow" />
                </div>
                <div style={styles.dotsWrapper}>
                    {slides.map((_, index) => (
                        <div
                            key={index}
                            style={{
                                ...styles.dot,
                                ...(currentSlide === index ? styles.dotActive : {}),
                            }}
                        />
                    ))}
                </div>
            </div>
            <div style={styles.formSection}>
                <div style={styles.languageButtonWrapper}>
                    <button style={styles.languageButton} onClick={toggleDropdown}>
                        {t('Language')}
                    </button>
                    <div style={styles.dropdownMenu}>
                        <button value="en" onClick={handleLanguageChange} style={styles.dropdownItem}>
                            English
                        </button>
                        <button value="hi" onClick={handleLanguageChange} style={styles.dropdownItem}>
                            हिंदी
                        </button>
                        <button value="mar" onClick={handleLanguageChange} style={styles.dropdownItem}>
                            मराठी
                        </button>
                    </div>
                </div>
                <form style={styles.form} onSubmit={handleSubmit}>
                    <input
                        type="text"
                        value={aadharNumber}
                        onChange={(e) => setAadharNumber(e.target.value)}
                        placeholder={t('Aadhar Number')}
                        required
                        style={styles.input}
                    />
                    <input
                        type="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        placeholder={t('Password')}
                        required
                        style={styles.input}
                    />
                    <select
                        value={userType}
                        onChange={(e) => setUserType(e.target.value)}
                        style={styles.select}
                    >
                        <option value="Normal Patient">{t('Patient')}</option>
                        {/*<option value="Forum User">{t('Forum User')}</option>*/}
                        <option value="Hospital Doc">{t('Hospital Doc')}</option>
                        <option value="Nurse/Ward Boy">{t('Nurse/Ward Boy')}</option>
                        <option value="Lab Staff">{t('Lab Staff')}</option>
                        <option value="Pharmacy">{t('Pharmacy')}</option>
                        <option value="Nominee">{t('Nominee')}</option>
                    </select>
                    <button type="submit" style={styles.button}>
                        {t('Login')}
                    </button>
                </form>
            </div>
        </div>
    );
};

export default LoginPage;

================================================
File: src/pages/RegisterPage.js
================================================
import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import i18n from '../i18n';
import { useNavigate } from 'react-router-dom';
import axios from 'axios'; // Import axios for making API requests

const RegisterPage = () => {

    const navigate = useNavigate();

    const [aadharNumber, setAadharNumber] = useState('');
    const [name, setName] = useState('');
    const [password, setPassword] = useState('');
    const [userType, setUserType] = useState('Normal Patient');
    const { t } = useTranslation();
    const [dropdownOpen, setDropdownOpen] = useState(false);
    const [currentSlide, setCurrentSlide] = useState(0);

    const slides = [
        '/images/slide1.png',
        '/images/slide2.png',
        '/images/slide3.png',
    ];

    useEffect(() => {
        const slideInterval = setInterval(() => {
            setCurrentSlide((prevSlide) => (prevSlide + 1) % slides.length);
        }, 3000);

        return () => clearInterval(slideInterval);
    }, []);

    const handleSubmit = async (e) => {
        e.preventDefault();
    
        // Prepare data to send to the backend
        const data = {
            aadharNumber,
            name,
            password,
            role: userType === 'Normal Patient' ? 'patient' : 'doctor', // Map to backend role
        };
    
        try {
            // Send registration request to the backend
            const response = await axios.post('http://localhost:5001/api/users/register', data); // Corrected URL
    
            if (response.status === 201) {
                alert('Registration successful. Please log in to continue!');
                navigate('/login');
            }
        } catch (error) {
            console.error('Registration failed:', error);
            // Check if there is a response from the server
            const errorMessage = error.response ? error.response.data.error : 'Registration failed. Please try again.';
            alert(errorMessage);
        }
    };
    

    const handleLanguageChange = (e) => {
        i18n.changeLanguage(e.target.value);
        setDropdownOpen(false);
    };

    const toggleDropdown = () => {
        setDropdownOpen(!dropdownOpen);
    };

    const styles = {
        container: {
            display: 'flex',
            height: '100vh',
            fontFamily: "'Poppins', sans-serif",
            backgroundColor: '#e0f7fa',
            animation: 'fadeIn 1s ease-in-out',
            flexDirection: 'row',
        },
        leftSection: {
            flex: 1,
            position: 'relative',
            overflow: 'hidden',
            height: '100%',
        },
        slideShow: {
            position: 'absolute',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            transition: 'opacity 1s ease-in-out',
        },
        slideImage: {
            width: '90%',
            height: 'auto',
            objectFit: 'cover',
            position: 'absolute',
            top: '20px',
            bottom: '20px',
            left: '50%',
            transform: 'translateX(-50%)',
            borderRadius: '20px',
            boxShadow: '0px 8px 15px rgba(0, 0, 0, 0.1)',
        },
        dotsWrapper: {
            position: 'absolute',
            bottom: '20px',
            display: 'flex',
            justifyContent: 'center',
            width: '100%',
        },
        dot: {
            height: '10px',
            width: '10px',
            borderRadius: '50%',
            backgroundColor: '#fff',
            margin: '0 5px',
            opacity: 0.5,
            transition: 'opacity 0.3s',
        },
        dotActive: {
            opacity: 1,
        },
        formSection: {
            flex: 1,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            padding: '20px',
        },
        form: {
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            backgroundColor: '#ffffff',
            padding: '30px',
            borderRadius: '30px',
            boxShadow: '0 10px 30px rgba(0, 0, 0, 0.1)',
            transition: 'transform 0.3s ease',
            maxWidth: '90%',
        },
        input: {
            margin: '10px 0',
            padding: '12px 15px',
            fontSize: '1rem',
            borderRadius: '5px',
            border: '1px solid #ccc',
            width: '100%',
            transition: 'border-color 0.3s ease',
            outline: 'none',
        },
        select: {
            margin: '10px 0',
            padding: '12px 15px',
            fontSize: '1rem',
            borderRadius: '5px',
            border: '1px solid #ccc',
            width: '100%',
            transition: 'border-color 0.3s ease',
        },
        button: {
            padding: '12px 30px',
            fontSize: '1rem',
            color: '#fff',
            backgroundColor: '#007bff',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
            marginTop: '20px',
            transition: 'background-color 0.3s ease, transform 0.3s ease',
        },
        languageButtonWrapper: {
            position: 'absolute',
            top: '20px',
            right: '20px',
            display: 'inline-block',
        },
        languageButton: {
            padding: '10px 20px',
            fontSize: '1rem',
            color: '#fff',
            backgroundColor: '#007bff',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
            position: 'relative',
            transition: 'background-color 0.3s ease',
        },
        dropdownMenu: {
            display: dropdownOpen ? 'block' : 'none',
            position: 'absolute',
            top: '100%',
            left: '0',
            backgroundColor: '#fff',
            border: '1px solid #007bff',
            borderRadius: '5px',
            minWidth: '100%',
            zIndex: 1,
        },
        dropdownItem: {
            padding: '10px',
            backgroundColor: '#fff',
            color: '#007bff',
            border: 'none',
            width: '100%',
            textAlign: 'left',
            cursor: 'pointer',
            transition: 'background-color 0.3s ease',
        },
        '@keyframes fadeIn': {
            from: { opacity: 0 },
            to: { opacity: 1 },
        },
        /* Responsive styling */
        '@media (max-width: 1024px)': { // Tablets
            container: {
                flexDirection: 'column',
            },
            formSection: {
                padding: '15px',
            },
            form: {
                padding: '20px',
                width: '80%',
            },
            slideImage: {
                width: '80%',
            },
            button: {
                padding: '10px 25px',
                fontSize: '0.9rem',
            },
        },
        '@media (max-width: 768px)': { // Small tablets and large phones
            container: {
                flexDirection: 'column',
                padding: '10px',
            },
            formSection: {
                padding: '10px',
            },
            form: {
                width: '90%',
                padding: '15px',
            },
            slideImage: {
                width: '70%',
                top: '10px',
                borderRadius: '15px',
            },
            button: {
                padding: '8px 20px',
                fontSize: '0.9rem',
            },
        },
        '@media (max-width: 480px)': { // Mobile devices
            container: {
                flexDirection: 'column',
                padding: '5px',
            },
            formSection: {
                padding: '5px',
            },
            form: {
                width: '95%',
                padding: '10px',
                borderRadius: '20px',
            },
            slideImage: {
                width: '85%',
                borderRadius: '10px',
            },
            button: {
                padding: '7px 15px',
                fontSize: '0.8rem',
            },
            dotsWrapper: {
                bottom: '10px',
            },
            dot: {
                height: '8px',
                width: '8px',
            },
        },
    };
    
    

    return (
        <div style={styles.container}>
            <div style={styles.leftSection}>
                <div style={styles.slideShow}>
                    <img src={slides[currentSlide]} style={styles.slideImage} alt="Slideshow" />
                </div>
                <div style={styles.dotsWrapper}>
                    {slides.map((_, index) => (
                        <div
                            key={index}
                            style={{
                                ...styles.dot,
                                ...(currentSlide === index ? styles.dotActive : {}),
                            }}
                        />
                    ))}
                </div>
            </div>
            <div style={styles.formSection}>
                <div style={styles.languageButtonWrapper}>
                    <button style={styles.languageButton} onClick={toggleDropdown}>
                        {t('Language')}
                    </button>
                    <div style={styles.dropdownMenu}>
                        <button value="en" onClick={handleLanguageChange} style={styles.dropdownItem}>
                            English
                        </button>
                        <button value="hi" onClick={handleLanguageChange} style={styles.dropdownItem}>
                            हिंदी
                        </button>
                        <button value="mar" onClick={handleLanguageChange} style={styles.dropdownItem}>
                            मराठी
                        </button>
                    </div>
                </div>
                <form style={styles.form} onSubmit={handleSubmit}>
                    <input
                        type="text"
                        value={aadharNumber}
                        onChange={(e) => setAadharNumber(e.target.value)}
                        placeholder={t('Aadhar Number')}
                        required
                        style={styles.input}
                    />
                    <input
                        type="text"
                        value={name}
                        onChange={(e) => setName(e.target.value)}
                        placeholder={t('Name')}
                        required
                        style={styles.input}
                    />
                    <input
                        type="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        placeholder={t('Password')}
                        required
                        style={styles.input}
                    />
                    <select
                        value={userType}
                        onChange={(e) => setUserType(e.target.value)}
                        style={styles.select}
                    >
                        <option value="Normal Patient">{t('Patient')}</option>
                        <option value="Hospital Doc">{t('Hospital Doc')}</option>
                        <option value="Nurse/Ward Boy">{t('Nurse/Ward Boy')}</option>
                        <option value="Lab Staff">{t('Lab Staff')}</option>
                        <option value="Pharmacy">{t('Pharmacy')}</option>
                        <option value="Nominee">{t('Nominee')}</option>
                    </select>
                    <button
                        type="submit"
                        style={styles.button}
                    >
                        {t('Register')}
                    </button>
                </form>
            </div>
        </div>
    );
};

export default RegisterPage;


